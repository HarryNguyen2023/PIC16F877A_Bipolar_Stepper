

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Jun 17 11:42:47 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31     0000                     
    32                           ; Version 2.40
    33                           ; Generated 17/11/2021 GMT
    34                           ; 
    35                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F877A Definitions
    65                           ; 
    66                           ; SFR Addresses
    67     0000                     	;# 
    68     0001                     	;# 
    69     0002                     	;# 
    70     0003                     	;# 
    71     0004                     	;# 
    72     0005                     	;# 
    73     0006                     	;# 
    74     0007                     	;# 
    75     0008                     	;# 
    76     0009                     	;# 
    77     000A                     	;# 
    78     000B                     	;# 
    79     000C                     	;# 
    80     000D                     	;# 
    81     000E                     	;# 
    82     000E                     	;# 
    83     000F                     	;# 
    84     0010                     	;# 
    85     0011                     	;# 
    86     0012                     	;# 
    87     0013                     	;# 
    88     0014                     	;# 
    89     0015                     	;# 
    90     0015                     	;# 
    91     0016                     	;# 
    92     0017                     	;# 
    93     0018                     	;# 
    94     0019                     	;# 
    95     001A                     	;# 
    96     001B                     	;# 
    97     001B                     	;# 
    98     001C                     	;# 
    99     001D                     	;# 
   100     001E                     	;# 
   101     001F                     	;# 
   102     0081                     	;# 
   103     0085                     	;# 
   104     0086                     	;# 
   105     0087                     	;# 
   106     0088                     	;# 
   107     0089                     	;# 
   108     008C                     	;# 
   109     008D                     	;# 
   110     008E                     	;# 
   111     0091                     	;# 
   112     0092                     	;# 
   113     0093                     	;# 
   114     0094                     	;# 
   115     0098                     	;# 
   116     0099                     	;# 
   117     009C                     	;# 
   118     009D                     	;# 
   119     009E                     	;# 
   120     009F                     	;# 
   121     010C                     	;# 
   122     010D                     	;# 
   123     010E                     	;# 
   124     010F                     	;# 
   125     018C                     	;# 
   126     018D                     	;# 
   127     0000                     	;# 
   128     0001                     	;# 
   129     0002                     	;# 
   130     0003                     	;# 
   131     0004                     	;# 
   132     0005                     	;# 
   133     0006                     	;# 
   134     0007                     	;# 
   135     0008                     	;# 
   136     0009                     	;# 
   137     000A                     	;# 
   138     000B                     	;# 
   139     000C                     	;# 
   140     000D                     	;# 
   141     000E                     	;# 
   142     000E                     	;# 
   143     000F                     	;# 
   144     0010                     	;# 
   145     0011                     	;# 
   146     0012                     	;# 
   147     0013                     	;# 
   148     0014                     	;# 
   149     0015                     	;# 
   150     0015                     	;# 
   151     0016                     	;# 
   152     0017                     	;# 
   153     0018                     	;# 
   154     0019                     	;# 
   155     001A                     	;# 
   156     001B                     	;# 
   157     001B                     	;# 
   158     001C                     	;# 
   159     001D                     	;# 
   160     001E                     	;# 
   161     001F                     	;# 
   162     0081                     	;# 
   163     0085                     	;# 
   164     0086                     	;# 
   165     0087                     	;# 
   166     0088                     	;# 
   167     0089                     	;# 
   168     008C                     	;# 
   169     008D                     	;# 
   170     008E                     	;# 
   171     0091                     	;# 
   172     0092                     	;# 
   173     0093                     	;# 
   174     0094                     	;# 
   175     0098                     	;# 
   176     0099                     	;# 
   177     009C                     	;# 
   178     009D                     	;# 
   179     009E                     	;# 
   180     009F                     	;# 
   181     010C                     	;# 
   182     010D                     	;# 
   183     010E                     	;# 
   184     010F                     	;# 
   185     018C                     	;# 
   186     018D                     	;# 
   187     0000                     	;# 
   188     0001                     	;# 
   189     0002                     	;# 
   190     0003                     	;# 
   191     0004                     	;# 
   192     0005                     	;# 
   193     0006                     	;# 
   194     0007                     	;# 
   195     0008                     	;# 
   196     0009                     	;# 
   197     000A                     	;# 
   198     000B                     	;# 
   199     000C                     	;# 
   200     000D                     	;# 
   201     000E                     	;# 
   202     000E                     	;# 
   203     000F                     	;# 
   204     0010                     	;# 
   205     0011                     	;# 
   206     0012                     	;# 
   207     0013                     	;# 
   208     0014                     	;# 
   209     0015                     	;# 
   210     0015                     	;# 
   211     0016                     	;# 
   212     0017                     	;# 
   213     0018                     	;# 
   214     0019                     	;# 
   215     001A                     	;# 
   216     001B                     	;# 
   217     001B                     	;# 
   218     001C                     	;# 
   219     001D                     	;# 
   220     001E                     	;# 
   221     001F                     	;# 
   222     0081                     	;# 
   223     0085                     	;# 
   224     0086                     	;# 
   225     0087                     	;# 
   226     0088                     	;# 
   227     0089                     	;# 
   228     008C                     	;# 
   229     008D                     	;# 
   230     008E                     	;# 
   231     0091                     	;# 
   232     0092                     	;# 
   233     0093                     	;# 
   234     0094                     	;# 
   235     0098                     	;# 
   236     0099                     	;# 
   237     009C                     	;# 
   238     009D                     	;# 
   239     009E                     	;# 
   240     009F                     	;# 
   241     010C                     	;# 
   242     010D                     	;# 
   243     010E                     	;# 
   244     010F                     	;# 
   245     018C                     	;# 
   246     018D                     	;# 
   247                           
   248                           	psect	idataBANK0
   249     044A                     __pidataBANK0:
   250                           
   251                           ;initializer for _motor_freq
   252     044A  34D0               	retlw	208
   253     044B  3407               	retlw	7
   254     0019                     _TXREG	set	25
   255     001A                     _RCREG	set	26
   256     0015                     _CCPR1L	set	21
   257     0017                     _CCP1CONbits	set	23
   258     0064                     _TXIF	set	100
   259     00C6                     _RX9	set	198
   260     005E                     _PEIE	set	94
   261     00C7                     _SPEN	set	199
   262     0040                     _RD0	set	64
   263     00C4                     _CREN	set	196
   264     00C1                     _OERR	set	193
   265     0065                     _RCIF	set	101
   266     0041                     _RD1	set	65
   267     0030                     _RB0	set	48
   268     0092                     _TMR2ON	set	146
   269     0090                     _T2CKPS0	set	144
   270     0091                     _T2CKPS1	set	145
   271     00BA                     _CCP1M2	set	186
   272     00BB                     _CCP1M3	set	187
   273     005F                     _GIE	set	95
   274     005C                     _INTE	set	92
   275     0059                     _INTF	set	89
   276     0099                     _SPBRG	set	153
   277     0087                     _TRISCbits	set	135
   278     0092                     _PR2	set	146
   279     04C6                     _TX9	set	1222
   280     04C5                     _TXEN	set	1221
   281     0465                     _RCIE	set	1125
   282     04C4                     _SYNC	set	1220
   283     04C2                     _BRGH	set	1218
   284     043A                     _TRISC2	set	1082
   285     040E                     _INTEDG	set	1038
   286     0430                     _TRISB0	set	1072
   287                           
   288                           	psect	strings
   289     0300                     __pstrings:
   290     0300                     stringtab:
   291     0300                     __stringtab:
   292                           
   293                           ;	String table - string pointers are 1 byte each
   294     0300  1BFF               	btfsc	btemp+1,7
   295     0301  2B0A               	ljmp	stringcode
   296     0302  1383               	bcf	3,7
   297     0303  187F               	btfsc	btemp+1,0
   298     0304  1783               	bsf	3,7
   299     0305  0800               	movf	0,w
   300     0306  0A84               	incf	4,f
   301     0307  1903               	skipnz
   302     0308  0AFF               	incf	btemp+1,f
   303     0309  0008               	return
   304     030A                     stringcode:
   305     030A                     stringdir:
   306     030A  3003               	movlw	high stringdir
   307     030B  008A               	movwf	10
   308     030C  0804               	movf	4,w
   309     030D  0A84               	incf	4,f
   310     030E  0782               	addwf	2,f
   311     030F                     __stringbase:
   312     030F  3400               	retlw	0
   313     0310                     __end_of__stringtab:
   314     0310                     STR_1:
   315     0310  3445               	retlw	69	;'E'
   316     0311  3452               	retlw	82	;'R'
   317     0312  3452               	retlw	82	;'R'
   318     0313  344F               	retlw	79	;'O'
   319     0314  3452               	retlw	82	;'R'
   320     0315  343A               	retlw	58	;':'
   321     0316  3420               	retlw	32	;' '
   322     0317  3469               	retlw	105	;'i'
   323     0318  346E               	retlw	110	;'n'
   324     0319  3476               	retlw	118	;'v'
   325     031A  3461               	retlw	97	;'a'
   326     031B  346C               	retlw	108	;'l'
   327     031C  3469               	retlw	105	;'i'
   328     031D  3464               	retlw	100	;'d'
   329     031E  3420               	retlw	32	;' '
   330     031F  3466               	retlw	102	;'f'
   331     0320  3472               	retlw	114	;'r'
   332     0321  3465               	retlw	101	;'e'
   333     0322  3471               	retlw	113	;'q'
   334     0323  3475               	retlw	117	;'u'
   335     0324  3465               	retlw	101	;'e'
   336     0325  346E               	retlw	110	;'n'
   337     0326  3463               	retlw	99	;'c'
   338     0327  3479               	retlw	121	;'y'
   339     0328  3421               	retlw	33	;'!'
   340     0329  3400               	retlw	0
   341     032A                     STR_2:
   342     032A  3452               	retlw	82	;'R'
   343     032B  3465               	retlw	101	;'e'
   344     032C  3463               	retlw	99	;'c'
   345     032D  3465               	retlw	101	;'e'
   346     032E  3469               	retlw	105	;'i'
   347     032F  3476               	retlw	118	;'v'
   348     0330  3465               	retlw	101	;'e'
   349     0331  3464               	retlw	100	;'d'
   350     0332  343A               	retlw	58	;':'
   351     0333  3420               	retlw	32	;' '
   352     0334  345B               	retlw	91	;'['
   353     0335  3425               	retlw	37	;'%'
   354     0336  3463               	retlw	99	;'c'
   355     0337  345D               	retlw	93	;']'
   356     0338  340D               	retlw	13
   357     0339  340A               	retlw	10
   358     033A  3400               	retlw	0
   359     033B                     STR_3:
   360     033B  3453               	retlw	83	;'S'
   361     033C  3470               	retlw	112	;'p'
   362     033D  3465               	retlw	101	;'e'
   363     033E  3465               	retlw	101	;'e'
   364     033F  3464               	retlw	100	;'d'
   365     0340  3420               	retlw	32	;' '
   366     0341  3431               	retlw	49	;'1'
   367     0342  3420               	retlw	32	;' '
   368     0343  3472               	retlw	114	;'r'
   369     0344  3475               	retlw	117	;'u'
   370     0345  346E               	retlw	110	;'n'
   371     0346  346E               	retlw	110	;'n'
   372     0347  3469               	retlw	105	;'i'
   373     0348  346E               	retlw	110	;'n'
   374     0349  3467               	retlw	103	;'g'
   375     034A  3400               	retlw	0
   376     034B                     STR_4:
   377     034B  3453               	retlw	83	;'S'
   378     034C  3470               	retlw	112	;'p'
   379     034D  3465               	retlw	101	;'e'
   380     034E  3465               	retlw	101	;'e'
   381     034F  3464               	retlw	100	;'d'
   382     0350  3420               	retlw	32	;' '
   383     0351  3432               	retlw	50	;'2'
   384     0352  3420               	retlw	32	;' '
   385     0353  3472               	retlw	114	;'r'
   386     0354  3475               	retlw	117	;'u'
   387     0355  346E               	retlw	110	;'n'
   388     0356  346E               	retlw	110	;'n'
   389     0357  3469               	retlw	105	;'i'
   390     0358  346E               	retlw	110	;'n'
   391     0359  3467               	retlw	103	;'g'
   392     035A  3400               	retlw	0
   393     035B                     STR_5:
   394     035B  3453               	retlw	83	;'S'
   395     035C  3470               	retlw	112	;'p'
   396     035D  3465               	retlw	101	;'e'
   397     035E  3465               	retlw	101	;'e'
   398     035F  3464               	retlw	100	;'d'
   399     0360  3420               	retlw	32	;' '
   400     0361  3433               	retlw	51	;'3'
   401     0362  3420               	retlw	32	;' '
   402     0363  3472               	retlw	114	;'r'
   403     0364  3475               	retlw	117	;'u'
   404     0365  346E               	retlw	110	;'n'
   405     0366  346E               	retlw	110	;'n'
   406     0367  3469               	retlw	105	;'i'
   407     0368  346E               	retlw	110	;'n'
   408     0369  3467               	retlw	103	;'g'
   409     036A  3400               	retlw	0
   410                           
   411                           	psect	cinit
   412     0015                     start_initialization:	
   413                           ; #config settings
   414                           
   415     0015                     __initialization:
   416                           
   417                           ; Initialize objects allocated to BANK0
   418     0015  120A  118A  244A  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   419     001A  00DA               	movwf	__pdataBANK0& (0+127)
   420     001B  120A  118A  244B  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   421     0020  00DB               	movwf	(__pdataBANK0+1)& (0+127)
   422                           
   423                           ; Clear objects allocated to BANK0
   424     0021  1383               	bcf	3,7	;select IRP bank0
   425     0022  3047               	movlw	low __pbssBANK0
   426     0023  0084               	movwf	4
   427     0024  305A               	movlw	low (__pbssBANK0+19)
   428     0025  120A  118A  242A   	fcall	clear_ram0
   429     0028                     end_of_initialization:	
   430                           ;End of C runtime variable initialization code
   431                           
   432     0028                     __end_of__initialization:
   433     0028  0183               	clrf	3
   434     0029  120A  118A  2BF5   	ljmp	_main	;jump to C main() function
   435                           
   436                           	psect	bssBANK0
   437     0047                     __pbssBANK0:
   438     0047                     _command:
   439     0047                     	ds	1
   440     0048                     _mode:
   441     0048                     	ds	1
   442     0049                     _rcvStr:
   443     0049                     	ds	17
   444                           
   445                           	psect	dataBANK0
   446     005A                     __pdataBANK0:
   447     005A                     _motor_freq:
   448     005A                     	ds	2
   449                           
   450                           	psect	clrtext
   451     042A                     clear_ram0:	
   452                           ;	Called with FSR containing the base address, and
   453                           ;	W with the last address+1
   454                           
   455     042A  0064               	clrwdt	;clear the watchdog before getting into this loop
   456     042B                     clrloop0:
   457     042B  0180               	clrf	0	;clear RAM location pointed to by FSR
   458     042C  0A84               	incf	4,f	;increment pointer
   459     042D  0604               	xorwf	4,w	;XOR with final address
   460     042E  1903               	btfsc	3,2	;have we reached the end yet?
   461     042F  3400               	retlw	0	;all done for this memory range, return
   462     0430  0604               	xorwf	4,w	;XOR again to restore value
   463     0431  2C2B               	goto	clrloop0	;do the next byte
   464                           
   465                           	psect	cstackBANK1
   466     00A0                     __pcstackBANK1:
   467     00A0                     Speed_Control@PWM_RANGE:
   468                           
   469                           ; 2 bytes @ 0x0
   470     00A0                     	ds	2
   471     00A2                     Speed_Control@dutyCycle:
   472                           
   473                           ; 2 bytes @ 0x2
   474     00A2                     	ds	2
   475                           
   476                           	psect	cstackCOMMON
   477     0070                     __pcstackCOMMON:
   478     0070                     ?_UART_Init:
   479     0070                     ?_ExtInt_Init:	
   480                           ; 1 bytes @ 0x0
   481                           
   482     0070                     ?_PWM_Init:	
   483                           ; 1 bytes @ 0x0
   484                           
   485     0070                     ?_ISR:	
   486                           ; 1 bytes @ 0x0
   487                           
   488     0070                     ?_main:	
   489                           ; 1 bytes @ 0x0
   490                           
   491     0070                     ?_UART_sendChar:	
   492                           ; 1 bytes @ 0x0
   493                           
   494     0070                     ?i1_UART_sendChar:	
   495                           ; 1 bytes @ 0x0
   496                           
   497     0070                     ??i1_UART_sendChar:	
   498                           ; 1 bytes @ 0x0
   499                           
   500     0070                     ?_sprintf:	
   501                           ; 1 bytes @ 0x0
   502                           
   503     0070                     ?i1___aldiv:	
   504                           ; 2 bytes @ 0x0
   505                           
   506     0070                     sprintf@f:	
   507                           ; 4 bytes @ 0x0
   508                           
   509     0070                     i1UART_sendChar@data:	
   510                           ; 1 bytes @ 0x0
   511                           
   512     0070                     i1___aldiv@divisor:	
   513                           ; 1 bytes @ 0x0
   514                           
   515                           
   516                           ; 4 bytes @ 0x0
   517     0070                     	ds	1
   518     0071                     ?i1_UART_sendString:
   519     0071                     i1UART_sendString@str:	
   520                           ; 1 bytes @ 0x1
   521                           
   522                           
   523                           ; 2 bytes @ 0x1
   524     0071                     	ds	2
   525     0073                     ??_sprintf:
   526     0073                     ??i1_UART_sendString:	
   527                           ; 1 bytes @ 0x3
   528                           
   529                           
   530                           ; 1 bytes @ 0x3
   531     0073                     	ds	1
   532     0074                     i1___aldiv@dividend:
   533                           
   534                           ; 4 bytes @ 0x4
   535     0074                     	ds	1
   536     0075                     sprintf@ap:
   537                           
   538                           ; 1 bytes @ 0x5
   539     0075                     	ds	1
   540     0076                     sprintf@c:
   541                           
   542                           ; 1 bytes @ 0x6
   543     0076                     	ds	1
   544     0077                     sprintf@sp:
   545                           
   546                           ; 1 bytes @ 0x7
   547     0077                     	ds	1
   548     0078                     ??i1___aldiv:
   549                           
   550                           ; 1 bytes @ 0x8
   551     0078                     	ds	1
   552     0079                     ??i1_Speed_Control:
   553                           
   554                           ; 1 bytes @ 0x9
   555     0079                     	ds	2
   556                           
   557                           	psect	cstackBANK0
   558     0020                     __pcstackBANK0:
   559     0020                     i1___aldiv@counter:
   560                           
   561                           ; 1 bytes @ 0x0
   562     0020                     	ds	1
   563     0021                     i1___aldiv@sign:
   564                           
   565                           ; 1 bytes @ 0x1
   566     0021                     	ds	1
   567     0022                     i1___aldiv@quotient:
   568                           
   569                           ; 4 bytes @ 0x2
   570     0022                     	ds	4
   571     0026                     ?i1_Speed_Control:
   572     0026                     i1Speed_Control@PWM_FREQ:	
   573                           ; 1 bytes @ 0x6
   574                           
   575                           
   576                           ; 2 bytes @ 0x6
   577     0026                     	ds	2
   578     0028                     i1Speed_Control@State:
   579                           
   580                           ; 1 bytes @ 0x8
   581     0028                     	ds	1
   582     0029                     i1Speed_Control@PWM_RANGE:
   583                           
   584                           ; 2 bytes @ 0x9
   585     0029                     	ds	2
   586     002B                     i1Speed_Control@dutyCycle:
   587                           
   588                           ; 2 bytes @ 0xB
   589     002B                     	ds	2
   590     002D                     ??_ISR:
   591                           
   592                           ; 1 bytes @ 0xD
   593     002D                     	ds	6
   594     0033                     ??_UART_Init:
   595     0033                     ??_ExtInt_Init:	
   596                           ; 1 bytes @ 0x13
   597                           
   598     0033                     ??_PWM_Init:	
   599                           ; 1 bytes @ 0x13
   600                           
   601     0033                     ??_UART_sendChar:	
   602                           ; 1 bytes @ 0x13
   603                           
   604     0033                     ?___aldiv:	
   605                           ; 1 bytes @ 0x13
   606                           
   607     0033                     UART_sendChar@data:	
   608                           ; 4 bytes @ 0x13
   609                           
   610     0033                     ___aldiv@divisor:	
   611                           ; 1 bytes @ 0x13
   612                           
   613                           
   614                           ; 4 bytes @ 0x13
   615     0033                     	ds	1
   616     0034                     ?_UART_sendString:
   617     0034                     UART_sendString@str:	
   618                           ; 1 bytes @ 0x14
   619                           
   620                           
   621                           ; 2 bytes @ 0x14
   622     0034                     	ds	2
   623     0036                     ??_UART_sendString:
   624                           
   625                           ; 1 bytes @ 0x16
   626     0036                     	ds	1
   627     0037                     ___aldiv@dividend:
   628                           
   629                           ; 4 bytes @ 0x17
   630     0037                     	ds	4
   631     003B                     ??___aldiv:
   632                           
   633                           ; 1 bytes @ 0x1B
   634     003B                     	ds	1
   635     003C                     ___aldiv@counter:
   636                           
   637                           ; 1 bytes @ 0x1C
   638     003C                     	ds	1
   639     003D                     ___aldiv@sign:
   640                           
   641                           ; 1 bytes @ 0x1D
   642     003D                     	ds	1
   643     003E                     ___aldiv@quotient:
   644                           
   645                           ; 4 bytes @ 0x1E
   646     003E                     	ds	4
   647     0042                     ?_Speed_Control:
   648     0042                     Speed_Control@PWM_FREQ:	
   649                           ; 1 bytes @ 0x22
   650                           
   651                           
   652                           ; 2 bytes @ 0x22
   653     0042                     	ds	2
   654     0044                     Speed_Control@State:
   655                           
   656                           ; 1 bytes @ 0x24
   657     0044                     	ds	1
   658     0045                     ??_Speed_Control:
   659                           
   660                           ; 1 bytes @ 0x25
   661     0045                     	ds	2
   662     0047                     ??_main:
   663                           
   664                           	psect	maintext
   665     03F5                     __pmaintext:	
   666                           ; 1 bytes @ 0x27
   667 ;;
   668 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   669 ;;
   670 ;; *************** function _main *****************
   671 ;; Defined at:
   672 ;;		line 140 in file "Bipolar_Stepper.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;		None
   675 ;; Auto vars:     Size  Location     Type
   676 ;;		None
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : B00/0
   683 ;;		On exit  : 300/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   686 ;;      Params:         0       0       0       0       0
   687 ;;      Locals:         0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0
   689 ;;      Totals:         0       0       0       0       0
   690 ;;Total ram usage:        0 bytes
   691 ;; Hardware stack levels required when called: 7
   692 ;; This function calls:
   693 ;;		_ExtInt_Init
   694 ;;		_PWM_Init
   695 ;;		_Speed_Control
   696 ;;		_UART_Init
   697 ;; This function is called by:
   698 ;;		Startup code after reset
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702     03F5                     _main:	
   703                           ;psect for function _main
   704                           
   705                           
   706                           ;Bipolar_Stepper.c: 143:     ExtInt_Init();
   707                           
   708                           ;incstack = 0
   709                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   710     03F5  120A  118A  2432  120A  118A  	fcall	_ExtInt_Init
   711                           
   712                           ;Bipolar_Stepper.c: 144:     PWM_Init();
   713     03FA  120A  118A  2445  120A  118A  	fcall	_PWM_Init
   714                           
   715                           ;Bipolar_Stepper.c: 145:     UART_Init();
   716     03FF  120A  118A  2415  120A  118A  	fcall	_UART_Init
   717                           
   718                           ;Bipolar_Stepper.c: 147:     RD1 = 1;
   719     0404  1488               	bsf	8,1	;volatile
   720                           
   721                           ;Bipolar_Stepper.c: 148:     RD0 = 1;
   722     0405  1408               	bsf	8,0	;volatile
   723     0406                     l1472:
   724                           
   725                           ;Bipolar_Stepper.c: 151:     {;Bipolar_Stepper.c: 152:         if(mode == 0)
   726     0406  0848               	movf	_mode,w	;volatile
   727     0407  1D03               	btfss	3,2
   728     0408  2C06               	goto	l1472
   729                           
   730                           ;Bipolar_Stepper.c: 153:         {;Bipolar_Stepper.c: 154:             Speed_Control(mot
      +                          or_freq, 1);
   731     0409  085B               	movf	_motor_freq+1,w	;volatile
   732     040A  00C3               	movwf	Speed_Control@PWM_FREQ+1
   733     040B  085A               	movf	_motor_freq,w	;volatile
   734     040C  00C2               	movwf	Speed_Control@PWM_FREQ
   735     040D  01C4               	clrf	Speed_Control@State
   736     040E  0AC4               	incf	Speed_Control@State,f
   737     040F  120A  118A  2146  120A  118A  	fcall	_Speed_Control
   738     0414  2C06               	goto	l1472
   739     0415                     __end_of_main:
   740                           
   741                           	psect	text1
   742     0415                     __ptext1:	
   743 ;; *************** function _UART_Init *****************
   744 ;; Defined at:
   745 ;;		line 4 in file "UART.c"
   746 ;; Parameters:    Size  Location     Type
   747 ;;		None
   748 ;; Auto vars:     Size  Location     Type
   749 ;;		None
   750 ;; Return value:  Size  Location     Type
   751 ;;                  1    wreg      void 
   752 ;; Registers used:
   753 ;;		wreg
   754 ;; Tracked objects:
   755 ;;		On entry : B00/0
   756 ;;		On exit  : B00/0
   757 ;;		Unchanged: 800/0
   758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   759 ;;      Params:         0       0       0       0       0
   760 ;;      Locals:         0       0       0       0       0
   761 ;;      Temps:          0       0       0       0       0
   762 ;;      Totals:         0       0       0       0       0
   763 ;;Total ram usage:        0 bytes
   764 ;; Hardware stack levels used: 1
   765 ;; Hardware stack levels required when called: 4
   766 ;; This function calls:
   767 ;;		Nothing
   768 ;; This function is called by:
   769 ;;		_main
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773     0415                     _UART_Init:	
   774                           ;psect for function _UART_Init
   775                           
   776                           
   777                           ;UART.c: 7:     TRISCbits.TRISC6 = 1;
   778                           
   779                           ;incstack = 0
   780                           ; Regs used in _UART_Init: [wreg]
   781     0415  1683               	bsf	3,5	;RP0=1, select bank1
   782     0416  1707               	bsf	7,6	;volatile
   783                           
   784                           ;UART.c: 8:     TRISCbits.TRISC7 = 1;
   785     0417  1787               	bsf	7,7	;volatile
   786                           
   787                           ;UART.c: 10:     SPBRG = ((16000000 / 16) / 9600) - 1;
   788     0418  3067               	movlw	103
   789     0419  0099               	movwf	25	;volatile
   790                           
   791                           ;UART.c: 11:     BRGH = 1;
   792     041A  1518               	bsf	24,2	;volatile
   793                           
   794                           ;UART.c: 13:     SYNC = 0;
   795     041B  1218               	bcf	24,4	;volatile
   796                           
   797                           ;UART.c: 14:     SPEN = 1;
   798     041C  1283               	bcf	3,5	;RP0=0, select bank0
   799     041D  1798               	bsf	24,7	;volatile
   800                           
   801                           ;UART.c: 16:     RCIE = 1;
   802     041E  1683               	bsf	3,5	;RP0=1, select bank1
   803     041F  168C               	bsf	12,5	;volatile
   804                           
   805                           ;UART.c: 17:     PEIE = 1;
   806     0420  170B               	bsf	11,6	;volatile
   807                           
   808                           ;UART.c: 18:     GIE = 1;
   809     0421  178B               	bsf	11,7	;volatile
   810                           
   811                           ;UART.c: 20:     TXEN = 1;
   812     0422  1698               	bsf	24,5	;volatile
   813                           
   814                           ;UART.c: 21:     CREN = 1;
   815     0423  1283               	bcf	3,5	;RP0=0, select bank0
   816     0424  1618               	bsf	24,4	;volatile
   817                           
   818                           ;UART.c: 23:     TX9 = 0;
   819     0425  1683               	bsf	3,5	;RP0=1, select bank1
   820     0426  1318               	bcf	24,6	;volatile
   821                           
   822                           ;UART.c: 24:     RX9 = 0;
   823     0427  1283               	bcf	3,5	;RP0=0, select bank0
   824     0428  1318               	bcf	24,6	;volatile
   825     0429  0008               	return
   826     042A                     __end_of_UART_Init:
   827                           
   828                           	psect	text2
   829     0146                     __ptext2:	
   830 ;; *************** function _Speed_Control *****************
   831 ;; Defined at:
   832 ;;		line 56 in file "Bipolar_Stepper.c"
   833 ;; Parameters:    Size  Location     Type
   834 ;;  PWM_FREQ        2   34[BANK0 ] unsigned int 
   835 ;;  State           1   36[BANK0 ] unsigned char 
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  dutyCycle       2    2[BANK1 ] unsigned int 
   838 ;;  PWM_RANGE       2    0[BANK1 ] unsigned int 
   839 ;; Return value:  Size  Location     Type
   840 ;;                  1    wreg      void 
   841 ;; Registers used:
   842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   843 ;; Tracked objects:
   844 ;;		On entry : 300/0
   845 ;;		On exit  : 300/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   848 ;;      Params:         0       3       0       0       0
   849 ;;      Locals:         0       0       4       0       0
   850 ;;      Temps:          0       2       0       0       0
   851 ;;      Totals:         0       5       4       0       0
   852 ;;Total ram usage:        9 bytes
   853 ;; Hardware stack levels used: 1
   854 ;; Hardware stack levels required when called: 6
   855 ;; This function calls:
   856 ;;		_UART_sendString
   857 ;;		___aldiv
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863     0146                     _Speed_Control:	
   864                           ;psect for function _Speed_Control
   865                           
   866                           
   867                           ;Bipolar_Stepper.c: 57:     uint16_t dutyCycle;;Bipolar_Stepper.c: 58:     if(PWM_FREQ >
      +                           10000 || PWM_FREQ < 1500)
   868                           
   869                           ;incstack = 0
   870                           ; Regs used in _Speed_Control: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   871     0146  3027               	movlw	39
   872     0147  0243               	subwf	Speed_Control@PWM_FREQ+1,w
   873     0148  3011               	movlw	17
   874     0149  1903               	skipnz
   875     014A  0242               	subwf	Speed_Control@PWM_FREQ,w
   876     014B  1803               	skipnc
   877     014C  2954               	goto	l1436
   878     014D  3005               	movlw	5
   879     014E  0243               	subwf	Speed_Control@PWM_FREQ+1,w
   880     014F  30DC               	movlw	220
   881     0150  1903               	skipnz
   882     0151  0242               	subwf	Speed_Control@PWM_FREQ,w
   883     0152  1803               	skipnc
   884     0153  295C               	goto	l1440
   885     0154                     l1436:
   886                           
   887                           ;Bipolar_Stepper.c: 59:     {;Bipolar_Stepper.c: 60:         UART_sendString("ERROR: inv
      +                          alid frequency!");
   888     0154  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   889     0155  00B4               	movwf	UART_sendString@str
   890     0156  3080               	movlw	128
   891     0157  00B5               	movwf	UART_sendString@str+1
   892     0158  120A  118A  23B3   	fcall	_UART_sendString
   893     015B  0008               	return
   894     015C                     l1440:
   895                           
   896                           ;Bipolar_Stepper.c: 63:     uint16_t PWM_RANGE = (16000000/(16*PWM_FREQ)) & 0xFFFF;
   897     015C  0843               	movf	Speed_Control@PWM_FREQ+1,w
   898     015D  00C6               	movwf	??_Speed_Control+1
   899     015E  0842               	movf	Speed_Control@PWM_FREQ,w
   900     015F  00C5               	movwf	??_Speed_Control
   901     0160  0EC5               	swapf	??_Speed_Control,f
   902     0161  0EC6               	swapf	??_Speed_Control+1,f
   903     0162  30F0               	movlw	240
   904     0163  05C6               	andwf	??_Speed_Control+1,f
   905     0164  0845               	movf	??_Speed_Control,w
   906     0165  390F               	andlw	15
   907     0166  04C6               	iorwf	??_Speed_Control+1,f
   908     0167  30F0               	movlw	240
   909     0168  05C5               	andwf	??_Speed_Control,f
   910     0169  0845               	movf	??_Speed_Control,w
   911     016A  00B3               	movwf	___aldiv@divisor
   912     016B  0846               	movf	??_Speed_Control+1,w
   913     016C  00B4               	movwf	___aldiv@divisor+1
   914     016D  01B5               	clrf	___aldiv@divisor+2
   915     016E  01B6               	clrf	___aldiv@divisor+3
   916     016F  3000               	movlw	0
   917     0170  00BA               	movwf	___aldiv@dividend+3
   918     0171  30F4               	movlw	244
   919     0172  00B9               	movwf	___aldiv@dividend+2
   920     0173  3024               	movlw	36
   921     0174  00B8               	movwf	___aldiv@dividend+1
   922     0175  3000               	movlw	0
   923     0176  00B7               	movwf	___aldiv@dividend
   924     0177  120A  118A  202C  120A  118A  	fcall	___aldiv
   925     017C  0834               	movf	?___aldiv+1,w
   926     017D  1683               	bsf	3,5	;RP0=1, select bank1
   927     017E  00A1               	movwf	(Speed_Control@PWM_RANGE+1)^(0+128)
   928     017F  1283               	bcf	3,5	;RP0=0, select bank0
   929     0180  0833               	movf	?___aldiv,w
   930     0181  1683               	bsf	3,5	;RP0=1, select bank1
   931     0182  00A0               	movwf	Speed_Control@PWM_RANGE^(0+128)
   932                           
   933                           ;Bipolar_Stepper.c: 64:     PR2 = ((PWM_RANGE/4) - 1) & 0xFF;
   934     0183  0821               	movf	(Speed_Control@PWM_RANGE+1)^(0+128),w
   935     0184  1283               	bcf	3,5	;RP0=0, select bank0
   936     0185  00C6               	movwf	??_Speed_Control+1
   937     0186  1683               	bsf	3,5	;RP0=1, select bank1
   938     0187  0820               	movf	Speed_Control@PWM_RANGE^(0+128),w
   939     0188  1283               	bcf	3,5	;RP0=0, select bank0
   940     0189  00C5               	movwf	??_Speed_Control
   941     018A  1003               	clrc
   942     018B  0CC6               	rrf	??_Speed_Control+1,f
   943     018C  0CC5               	rrf	??_Speed_Control,f
   944     018D  1003               	clrc
   945     018E  0CC6               	rrf	??_Speed_Control+1,f
   946     018F  0CC5               	rrf	??_Speed_Control,f
   947     0190  0845               	movf	??_Speed_Control,w
   948     0191  3EFF               	addlw	255
   949     0192  1683               	bsf	3,5	;RP0=1, select bank1
   950     0193  0092               	movwf	18	;volatile
   951                           
   952                           ;Bipolar_Stepper.c: 66:     T2CKPS1 = 1;
   953     0194  1283               	bcf	3,5	;RP0=0, select bank0
   954     0195  1492               	bsf	18,1	;volatile
   955                           
   956                           ;Bipolar_Stepper.c: 67:     T2CKPS0 = 1;
   957     0196  1412               	bsf	18,0	;volatile
   958                           
   959                           ;Bipolar_Stepper.c: 69:     if(State == 0)
   960     0197  0844               	movf	Speed_Control@State,w
   961     0198  1D03               	btfss	3,2
   962     0199  299E               	goto	l1452
   963                           
   964                           ;Bipolar_Stepper.c: 70:     {;Bipolar_Stepper.c: 71:         dutyCycle = 0;
   965     019A  1683               	bsf	3,5	;RP0=1, select bank1
   966     019B  01A2               	clrf	Speed_Control@dutyCycle^(0+128)
   967     019C  01A3               	clrf	(Speed_Control@dutyCycle+1)^(0+128)
   968                           
   969                           ;Bipolar_Stepper.c: 72:     }
   970     019D  29A6               	goto	l1456
   971     019E                     l1452:
   972     019E  0344               	decf	Speed_Control@State,w
   973     019F  1D03               	btfss	3,2
   974     01A0  29A6               	goto	l1456
   975                           
   976                           ;Bipolar_Stepper.c: 74:     {;Bipolar_Stepper.c: 75:         dutyCycle = PWM_RANGE;
   977     01A1  1683               	bsf	3,5	;RP0=1, select bank1
   978     01A2  0821               	movf	(Speed_Control@PWM_RANGE+1)^(0+128),w
   979     01A3  00A3               	movwf	(Speed_Control@dutyCycle+1)^(0+128)
   980     01A4  0820               	movf	Speed_Control@PWM_RANGE^(0+128),w
   981     01A5  00A2               	movwf	Speed_Control@dutyCycle^(0+128)
   982     01A6                     l1456:
   983                           
   984                           ;Bipolar_Stepper.c: 78:     CCP1CONbits.CCP1Y = (dutyCycle) & 1;
   985     01A6  1683               	bsf	3,5	;RP0=1, select bank1
   986     01A7  0822               	movf	Speed_Control@dutyCycle^(0+128),w
   987     01A8  3901               	andlw	1
   988     01A9  1283               	bcf	3,5	;RP0=0, select bank0
   989     01AA  00C5               	movwf	??_Speed_Control
   990     01AB  0EC5               	swapf	??_Speed_Control,f
   991     01AC  0817               	movf	23,w	;volatile
   992     01AD  0645               	xorwf	??_Speed_Control,w
   993     01AE  39EF               	andlw	-17
   994     01AF  0645               	xorwf	??_Speed_Control,w
   995     01B0  0097               	movwf	23	;volatile
   996                           
   997                           ;Bipolar_Stepper.c: 79:     CCP1CONbits.CCP1X = (dutyCycle) & 2;
   998     01B1  1683               	bsf	3,5	;RP0=1, select bank1
   999     01B2  0822               	movf	Speed_Control@dutyCycle^(0+128),w
  1000     01B3  3902               	andlw	2
  1001     01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1002     01B5  00C5               	movwf	??_Speed_Control
  1003     01B6  0EC5               	swapf	??_Speed_Control,f
  1004     01B7  0DC5               	rlf	??_Speed_Control,f
  1005     01B8  0817               	movf	23,w	;volatile
  1006     01B9  0645               	xorwf	??_Speed_Control,w
  1007     01BA  39DF               	andlw	-33
  1008     01BB  0645               	xorwf	??_Speed_Control,w
  1009     01BC  0097               	movwf	23	;volatile
  1010                           
  1011                           ;Bipolar_Stepper.c: 81:     CCPR1L = (dutyCycle) >> 2;
  1012     01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1013     01BE  0823               	movf	(Speed_Control@dutyCycle+1)^(0+128),w
  1014     01BF  1283               	bcf	3,5	;RP0=0, select bank0
  1015     01C0  00C6               	movwf	??_Speed_Control+1
  1016     01C1  1683               	bsf	3,5	;RP0=1, select bank1
  1017     01C2  0822               	movf	Speed_Control@dutyCycle^(0+128),w
  1018     01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1019     01C4  00C5               	movwf	??_Speed_Control
  1020     01C5  1003               	clrc
  1021     01C6  0CC6               	rrf	??_Speed_Control+1,f
  1022     01C7  0CC5               	rrf	??_Speed_Control,f
  1023     01C8  1003               	clrc
  1024     01C9  0CC6               	rrf	??_Speed_Control+1,f
  1025     01CA  0CC5               	rrf	??_Speed_Control,f
  1026     01CB  0845               	movf	??_Speed_Control,w
  1027     01CC  0095               	movwf	21	;volatile
  1028                           
  1029                           ;Bipolar_Stepper.c: 83:     TMR2ON = 1;
  1030     01CD  1512               	bsf	18,2	;volatile
  1031     01CE  0008               	return
  1032     01CF                     __end_of_Speed_Control:
  1033                           
  1034                           	psect	text3
  1035     002C                     __ptext3:	
  1036 ;; *************** function ___aldiv *****************
  1037 ;; Defined at:
  1038 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\aldiv.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;  divisor         4   19[BANK0 ] long 
  1041 ;;  dividend        4   23[BANK0 ] long 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  quotient        4   30[BANK0 ] long 
  1044 ;;  sign            1   29[BANK0 ] unsigned char 
  1045 ;;  counter         1   28[BANK0 ] unsigned char 
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  4   19[BANK0 ] long 
  1048 ;; Registers used:
  1049 ;;		wreg, status,2, status,0, btemp+1
  1050 ;; Tracked objects:
  1051 ;;		On entry : 300/0
  1052 ;;		On exit  : 300/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1055 ;;      Params:         0       8       0       0       0
  1056 ;;      Locals:         0       6       0       0       0
  1057 ;;      Temps:          0       1       0       0       0
  1058 ;;      Totals:         0      15       0       0       0
  1059 ;;Total ram usage:       15 bytes
  1060 ;; Hardware stack levels used: 1
  1061 ;; Hardware stack levels required when called: 4
  1062 ;; This function calls:
  1063 ;;		Nothing
  1064 ;; This function is called by:
  1065 ;;		_Speed_Control
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069     002C                     ___aldiv:	
  1070                           ;psect for function ___aldiv
  1071                           
  1072                           
  1073                           ;incstack = 0
  1074                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  1075     002C  01BD               	clrf	___aldiv@sign
  1076     002D  1FB6               	btfss	___aldiv@divisor+3,7
  1077     002E  283C               	goto	l325
  1078     002F  09B3               	comf	___aldiv@divisor,f
  1079     0030  09B4               	comf	___aldiv@divisor+1,f
  1080     0031  09B5               	comf	___aldiv@divisor+2,f
  1081     0032  09B6               	comf	___aldiv@divisor+3,f
  1082     0033  0AB3               	incf	___aldiv@divisor,f
  1083     0034  1903               	skipnz
  1084     0035  0AB4               	incf	___aldiv@divisor+1,f
  1085     0036  1903               	skipnz
  1086     0037  0AB5               	incf	___aldiv@divisor+2,f
  1087     0038  1903               	skipnz
  1088     0039  0AB6               	incf	___aldiv@divisor+3,f
  1089     003A  01BD               	clrf	___aldiv@sign
  1090     003B  0ABD               	incf	___aldiv@sign,f
  1091     003C                     l325:
  1092     003C  1FBA               	btfss	___aldiv@dividend+3,7
  1093     003D  284D               	goto	l1400
  1094     003E  09B7               	comf	___aldiv@dividend,f
  1095     003F  09B8               	comf	___aldiv@dividend+1,f
  1096     0040  09B9               	comf	___aldiv@dividend+2,f
  1097     0041  09BA               	comf	___aldiv@dividend+3,f
  1098     0042  0AB7               	incf	___aldiv@dividend,f
  1099     0043  1903               	skipnz
  1100     0044  0AB8               	incf	___aldiv@dividend+1,f
  1101     0045  1903               	skipnz
  1102     0046  0AB9               	incf	___aldiv@dividend+2,f
  1103     0047  1903               	skipnz
  1104     0048  0ABA               	incf	___aldiv@dividend+3,f
  1105     0049  3001               	movlw	1
  1106     004A  00FF               	movwf	127
  1107     004B  087F               	movf	127,w
  1108     004C  06BD               	xorwf	___aldiv@sign,f
  1109     004D                     l1400:
  1110     004D  3000               	movlw	0
  1111     004E  00C1               	movwf	___aldiv@quotient+3
  1112     004F  3000               	movlw	0
  1113     0050  00C0               	movwf	___aldiv@quotient+2
  1114     0051  3000               	movlw	0
  1115     0052  00BF               	movwf	___aldiv@quotient+1
  1116     0053  3000               	movlw	0
  1117     0054  00BE               	movwf	___aldiv@quotient
  1118     0055  0836               	movf	___aldiv@divisor+3,w
  1119     0056  0435               	iorwf	___aldiv@divisor+2,w
  1120     0057  0434               	iorwf	___aldiv@divisor+1,w
  1121     0058  0433               	iorwf	___aldiv@divisor,w
  1122     0059  1903               	skipnz
  1123     005A  28A2               	goto	l1424
  1124     005B  01BC               	clrf	___aldiv@counter
  1125     005C  0ABC               	incf	___aldiv@counter,f
  1126     005D                     l1410:
  1127     005D  1BB6               	btfsc	___aldiv@divisor+3,7
  1128     005E  286D               	goto	l1412
  1129     005F  3001               	movlw	1
  1130     0060  00BB               	movwf	??___aldiv
  1131     0061                     u945:
  1132     0061  1003               	clrc
  1133     0062  0DB3               	rlf	___aldiv@divisor,f
  1134     0063  0DB4               	rlf	___aldiv@divisor+1,f
  1135     0064  0DB5               	rlf	___aldiv@divisor+2,f
  1136     0065  0DB6               	rlf	___aldiv@divisor+3,f
  1137     0066  0BBB               	decfsz	??___aldiv,f
  1138     0067  2861               	goto	u945
  1139     0068  3001               	movlw	1
  1140     0069  00FF               	movwf	127
  1141     006A  087F               	movf	127,w
  1142     006B  07BC               	addwf	___aldiv@counter,f
  1143     006C  285D               	goto	l1410
  1144     006D                     l1412:
  1145     006D  3001               	movlw	1
  1146     006E  00BB               	movwf	??___aldiv
  1147     006F                     u965:
  1148     006F  1003               	clrc
  1149     0070  0DBE               	rlf	___aldiv@quotient,f
  1150     0071  0DBF               	rlf	___aldiv@quotient+1,f
  1151     0072  0DC0               	rlf	___aldiv@quotient+2,f
  1152     0073  0DC1               	rlf	___aldiv@quotient+3,f
  1153     0074  0BBB               	decfsz	??___aldiv,f
  1154     0075  286F               	goto	u965
  1155     0076  0836               	movf	___aldiv@divisor+3,w
  1156     0077  023A               	subwf	___aldiv@dividend+3,w
  1157     0078  1D03               	skipz
  1158     0079  2884               	goto	u975
  1159     007A  0835               	movf	___aldiv@divisor+2,w
  1160     007B  0239               	subwf	___aldiv@dividend+2,w
  1161     007C  1D03               	skipz
  1162     007D  2884               	goto	u975
  1163     007E  0834               	movf	___aldiv@divisor+1,w
  1164     007F  0238               	subwf	___aldiv@dividend+1,w
  1165     0080  1D03               	skipz
  1166     0081  2884               	goto	u975
  1167     0082  0833               	movf	___aldiv@divisor,w
  1168     0083  0237               	subwf	___aldiv@dividend,w
  1169     0084                     u975:
  1170     0084  1C03               	skipc
  1171     0085  2895               	goto	l1420
  1172     0086  0833               	movf	___aldiv@divisor,w
  1173     0087  02B7               	subwf	___aldiv@dividend,f
  1174     0088  0834               	movf	___aldiv@divisor+1,w
  1175     0089  1C03               	skipc
  1176     008A  0F34               	incfsz	___aldiv@divisor+1,w
  1177     008B  02B8               	subwf	___aldiv@dividend+1,f
  1178     008C  0835               	movf	___aldiv@divisor+2,w
  1179     008D  1C03               	skipc
  1180     008E  0F35               	incfsz	___aldiv@divisor+2,w
  1181     008F  02B9               	subwf	___aldiv@dividend+2,f
  1182     0090  0836               	movf	___aldiv@divisor+3,w
  1183     0091  1C03               	skipc
  1184     0092  0F36               	incfsz	___aldiv@divisor+3,w
  1185     0093  02BA               	subwf	___aldiv@dividend+3,f
  1186     0094  143E               	bsf	___aldiv@quotient,0
  1187     0095                     l1420:
  1188     0095  3001               	movlw	1
  1189     0096                     u985:
  1190     0096  1003               	clrc
  1191     0097  0CB6               	rrf	___aldiv@divisor+3,f
  1192     0098  0CB5               	rrf	___aldiv@divisor+2,f
  1193     0099  0CB4               	rrf	___aldiv@divisor+1,f
  1194     009A  0CB3               	rrf	___aldiv@divisor,f
  1195     009B  3EFF               	addlw	-1
  1196     009C  1D03               	skipz
  1197     009D  2896               	goto	u985
  1198     009E  3001               	movlw	1
  1199     009F  02BC               	subwf	___aldiv@counter,f
  1200     00A0  1D03               	btfss	3,2
  1201     00A1  286D               	goto	l1412
  1202     00A2                     l1424:
  1203     00A2  083D               	movf	___aldiv@sign,w
  1204     00A3  1903               	btfsc	3,2
  1205     00A4  28B0               	goto	l1428
  1206     00A5  09BE               	comf	___aldiv@quotient,f
  1207     00A6  09BF               	comf	___aldiv@quotient+1,f
  1208     00A7  09C0               	comf	___aldiv@quotient+2,f
  1209     00A8  09C1               	comf	___aldiv@quotient+3,f
  1210     00A9  0ABE               	incf	___aldiv@quotient,f
  1211     00AA  1903               	skipnz
  1212     00AB  0ABF               	incf	___aldiv@quotient+1,f
  1213     00AC  1903               	skipnz
  1214     00AD  0AC0               	incf	___aldiv@quotient+2,f
  1215     00AE  1903               	skipnz
  1216     00AF  0AC1               	incf	___aldiv@quotient+3,f
  1217     00B0                     l1428:
  1218     00B0  0841               	movf	___aldiv@quotient+3,w
  1219     00B1  00B6               	movwf	?___aldiv+3
  1220     00B2  0840               	movf	___aldiv@quotient+2,w
  1221     00B3  00B5               	movwf	?___aldiv+2
  1222     00B4  083F               	movf	___aldiv@quotient+1,w
  1223     00B5  00B4               	movwf	?___aldiv+1
  1224     00B6  083E               	movf	___aldiv@quotient,w
  1225     00B7  00B3               	movwf	?___aldiv
  1226     00B8  0008               	return
  1227     00B9                     __end_of___aldiv:
  1228                           
  1229                           	psect	text4
  1230     03B3                     __ptext4:	
  1231 ;; *************** function _UART_sendString *****************
  1232 ;; Defined at:
  1233 ;;		line 42 in file "UART.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;  str             2   20[BANK0 ] PTR unsigned char 
  1236 ;;		 -> STR_5(16), STR_4(16), STR_3(16), rcvStr(17), 
  1237 ;;		 -> STR_1(26), 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;		None
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 300/0
  1246 ;;		On exit  : 300/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1249 ;;      Params:         0       2       0       0       0
  1250 ;;      Locals:         0       0       0       0       0
  1251 ;;      Temps:          0       0       0       0       0
  1252 ;;      Totals:         0       2       0       0       0
  1253 ;;Total ram usage:        2 bytes
  1254 ;; Hardware stack levels used: 1
  1255 ;; Hardware stack levels required when called: 5
  1256 ;; This function calls:
  1257 ;;		_UART_sendChar
  1258 ;; This function is called by:
  1259 ;;		_Speed_Control
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263     03B3                     _UART_sendString:	
  1264                           ;psect for function _UART_sendString
  1265                           
  1266     03B3                     l1388:	
  1267                           ;UART.c: 42: void UART_sendString(char* str);UART.c: 43: {;UART.c: 44:    while (*str)
  1268                           
  1269                           ;incstack = 0
  1270                           ; Regs used in _UART_sendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1271                           
  1272                           
  1273                           ;UART.c: 44:    while (*str)
  1274     03B3  0835               	movf	UART_sendString@str+1,w
  1275     03B4  00FF               	movwf	127
  1276     03B5  0834               	movf	UART_sendString@str,w
  1277     03B6  0084               	movwf	4
  1278     03B7  120A  118A  2300  120A  118A  	fcall	stringtab
  1279     03BC  3A00               	xorlw	0
  1280     03BD  1903               	btfsc	3,2
  1281     03BE  0008               	return
  1282                           
  1283                           ;UART.c: 45:    {;UART.c: 46:        UART_sendChar(*str++);
  1284     03BF  0835               	movf	UART_sendString@str+1,w
  1285     03C0  00FF               	movwf	127
  1286     03C1  0834               	movf	UART_sendString@str,w
  1287     03C2  0084               	movwf	4
  1288     03C3  120A  118A  2300  120A  118A  	fcall	stringtab
  1289     03C8  120A  118A  2439  120A  118A  	fcall	_UART_sendChar
  1290     03CD  3001               	movlw	1
  1291     03CE  07B4               	addwf	UART_sendString@str,f
  1292     03CF  1803               	skipnc
  1293     03D0  0AB5               	incf	UART_sendString@str+1,f
  1294     03D1  3000               	movlw	0
  1295     03D2  07B5               	addwf	UART_sendString@str+1,f
  1296     03D3  2BB3               	goto	l1388
  1297     03D4                     __end_of_UART_sendString:
  1298                           
  1299                           	psect	text5
  1300     0439                     __ptext5:	
  1301 ;; *************** function _UART_sendChar *****************
  1302 ;; Defined at:
  1303 ;;		line 28 in file "UART.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;  data            1    wreg     unsigned char 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  data            1   19[BANK0 ] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg
  1312 ;; Tracked objects:
  1313 ;;		On entry : 300/0
  1314 ;;		On exit  : 300/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1317 ;;      Params:         0       0       0       0       0
  1318 ;;      Locals:         0       1       0       0       0
  1319 ;;      Temps:          0       0       0       0       0
  1320 ;;      Totals:         0       1       0       0       0
  1321 ;;Total ram usage:        1 bytes
  1322 ;; Hardware stack levels used: 1
  1323 ;; Hardware stack levels required when called: 4
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_UART_sendString
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331     0439                     _UART_sendChar:	
  1332                           ;psect for function _UART_sendChar
  1333                           
  1334                           
  1335                           ;incstack = 0
  1336                           ; Regs used in _UART_sendChar: [wreg]
  1337                           ;UART_sendChar@data stored from wreg
  1338     0439  00B3               	movwf	UART_sendChar@data
  1339     043A                     l136:	
  1340                           ;UART.c: 28: void UART_sendChar(char data);UART.c: 29: {;UART.c: 30:    while (!TXIF);
  1341                           
  1342     043A  1E0C               	btfss	12,4	;volatile
  1343     043B  2C3A               	goto	l136
  1344                           
  1345                           ;UART.c: 31:    TXREG = data;
  1346     043C  0833               	movf	UART_sendChar@data,w
  1347     043D  0099               	movwf	25	;volatile
  1348     043E  0008               	return
  1349     043F                     __end_of_UART_sendChar:
  1350                           
  1351                           	psect	text6
  1352     0445                     __ptext6:	
  1353 ;; *************** function _PWM_Init *****************
  1354 ;; Defined at:
  1355 ;;		line 47 in file "Bipolar_Stepper.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;		None
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		None
  1364 ;; Tracked objects:
  1365 ;;		On entry : B00/100
  1366 ;;		On exit  : B00/0
  1367 ;;		Unchanged: 800/0
  1368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1369 ;;      Params:         0       0       0       0       0
  1370 ;;      Locals:         0       0       0       0       0
  1371 ;;      Temps:          0       0       0       0       0
  1372 ;;      Totals:         0       0       0       0       0
  1373 ;;Total ram usage:        0 bytes
  1374 ;; Hardware stack levels used: 1
  1375 ;; Hardware stack levels required when called: 4
  1376 ;; This function calls:
  1377 ;;		Nothing
  1378 ;; This function is called by:
  1379 ;;		_main
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383     0445                     _PWM_Init:	
  1384                           ;psect for function _PWM_Init
  1385                           
  1386                           
  1387                           ;Bipolar_Stepper.c: 49:     TRISC2 = 0;
  1388                           
  1389                           ;incstack = 0
  1390                           ; Regs used in _PWM_Init: []
  1391     0445  1107               	bcf	7,2	;volatile
  1392                           
  1393                           ;Bipolar_Stepper.c: 51:     CCP1M3 = 1;
  1394     0446  1283               	bcf	3,5	;RP0=0, select bank0
  1395     0447  1597               	bsf	23,3	;volatile
  1396                           
  1397                           ;Bipolar_Stepper.c: 52:     CCP1M2 = 1;
  1398     0448  1517               	bsf	23,2	;volatile
  1399     0449  0008               	return
  1400     044A                     __end_of_PWM_Init:
  1401                           
  1402                           	psect	text7
  1403     0432                     __ptext7:	
  1404 ;; *************** function _ExtInt_Init *****************
  1405 ;; Defined at:
  1406 ;;		line 37 in file "Bipolar_Stepper.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;		None
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;		None
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		None
  1415 ;; Tracked objects:
  1416 ;;		On entry : B00/0
  1417 ;;		On exit  : B00/100
  1418 ;;		Unchanged: 800/0
  1419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1420 ;;      Params:         0       0       0       0       0
  1421 ;;      Locals:         0       0       0       0       0
  1422 ;;      Temps:          0       0       0       0       0
  1423 ;;      Totals:         0       0       0       0       0
  1424 ;;Total ram usage:        0 bytes
  1425 ;; Hardware stack levels used: 1
  1426 ;; Hardware stack levels required when called: 4
  1427 ;; This function calls:
  1428 ;;		Nothing
  1429 ;; This function is called by:
  1430 ;;		_main
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434     0432                     _ExtInt_Init:	
  1435                           ;psect for function _ExtInt_Init
  1436                           
  1437                           
  1438                           ;Bipolar_Stepper.c: 38:     TRISB0 = 1;
  1439                           
  1440                           ;incstack = 0
  1441                           ; Regs used in _ExtInt_Init: []
  1442     0432  1683               	bsf	3,5	;RP0=1, select bank1
  1443     0433  1406               	bsf	6,0	;volatile
  1444                           
  1445                           ;Bipolar_Stepper.c: 40:     INTEDG = 0;
  1446     0434  1301               	bcf	1,6	;volatile
  1447                           
  1448                           ;Bipolar_Stepper.c: 41:     INTF = 0;
  1449     0435  108B               	bcf	11,1	;volatile
  1450                           
  1451                           ;Bipolar_Stepper.c: 42:     INTE = 1;
  1452     0436  160B               	bsf	11,4	;volatile
  1453                           
  1454                           ;Bipolar_Stepper.c: 43:     GIE = 1;
  1455     0437  178B               	bsf	11,7	;volatile
  1456     0438  0008               	return
  1457     0439                     __end_of_ExtInt_Init:
  1458                           
  1459                           	psect	text8
  1460     01CF                     __ptext8:	
  1461 ;; *************** function _ISR *****************
  1462 ;; Defined at:
  1463 ;;		line 87 in file "Bipolar_Stepper.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;		None
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;		None
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  1    wreg      void 
  1470 ;; Registers used:
  1471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 300/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1477 ;;      Params:         0       0       0       0       0
  1478 ;;      Locals:         0       0       0       0       0
  1479 ;;      Temps:          0       6       0       0       0
  1480 ;;      Totals:         0       6       0       0       0
  1481 ;;Total ram usage:        6 bytes
  1482 ;; Hardware stack levels used: 1
  1483 ;; Hardware stack levels required when called: 3
  1484 ;; This function calls:
  1485 ;;		_sprintf
  1486 ;;		i1_Speed_Control
  1487 ;;		i1_UART_sendString
  1488 ;; This function is called by:
  1489 ;;		Interrupt level 1
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493     01CF                     _ISR:	
  1494                           ;psect for function _ISR
  1495                           
  1496                           
  1497                           ;Bipolar_Stepper.c: 90:     if(INTF){
  1498     01CF  1C8B               	btfss	11,1	;volatile
  1499     01D0  29EE               	goto	i1l78
  1500                           
  1501                           ;Bipolar_Stepper.c: 92:         _delay((unsigned long)((20)*(16000000/4000.0)));
  1502     01D1  3068               	movlw	104
  1503     01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1504     01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1505     01D4  00AE               	movwf	??_ISR+1
  1506     01D5  30E3               	movlw	227
  1507     01D6  00AD               	movwf	??_ISR
  1508     01D7                     u106_27:
  1509     01D7  0BAD               	decfsz	??_ISR,f
  1510     01D8  29D7               	goto	u106_27
  1511     01D9  0BAE               	decfsz	??_ISR+1,f
  1512     01DA  29D7               	goto	u106_27
  1513     01DB  29DC               	nop2
  1514                           
  1515                           ;Bipolar_Stepper.c: 93:         if(RB0 == 0){
  1516     01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1517     01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1518     01DE  1806               	btfsc	6,0	;volatile
  1519     01DF  29EB               	goto	i1l80
  1520                           
  1521                           ;Bipolar_Stepper.c: 94:             RD1 = 0;
  1522     01E0  1088               	bcf	8,1	;volatile
  1523                           
  1524                           ;Bipolar_Stepper.c: 95:             Speed_Control(1500, 0);
  1525     01E1  30DC               	movlw	220
  1526     01E2  00A6               	movwf	i1Speed_Control@PWM_FREQ
  1527     01E3  3005               	movlw	5
  1528     01E4  00A7               	movwf	i1Speed_Control@PWM_FREQ+1
  1529     01E5  01A8               	clrf	i1Speed_Control@State
  1530     01E6  120A  118A  2258  120A  118A  	fcall	i1_Speed_Control
  1531     01EB                     i1l80:
  1532     01EB  1C06               	btfss	6,0	;volatile
  1533     01EC  29EB               	goto	i1l80
  1534                           
  1535                           ;Bipolar_Stepper.c: 99:         INTF = 0;
  1536     01ED  108B               	bcf	11,1	;volatile
  1537     01EE                     i1l78:	
  1538                           ;Bipolar_Stepper.c: 100:     }
  1539                           
  1540                           
  1541                           ;Bipolar_Stepper.c: 102:     if(RCIF){
  1542     01EE  1E8C               	btfss	12,5	;volatile
  1543     01EF  2A4D               	goto	i1l93
  1544                           
  1545                           ;Bipolar_Stepper.c: 104:         if (OERR)
  1546     01F0  1C98               	btfss	24,1	;volatile
  1547     01F1  29F4               	goto	i1l1316
  1548                           
  1549                           ;Bipolar_Stepper.c: 105:         {;Bipolar_Stepper.c: 106:             CREN = 0;
  1550     01F2  1218               	bcf	24,4	;volatile
  1551                           
  1552                           ;Bipolar_Stepper.c: 107:             CREN = 1;
  1553     01F3  1618               	bsf	24,4	;volatile
  1554     01F4                     i1l1316:
  1555                           
  1556                           ;Bipolar_Stepper.c: 109:         command = RCREG;
  1557     01F4  081A               	movf	26,w	;volatile
  1558     01F5  00C7               	movwf	_command	;volatile
  1559                           
  1560                           ;Bipolar_Stepper.c: 110:         sprintf(rcvStr,"Received: [%c]\r\n",command);
  1561     01F6  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1562     01F7  00F0               	movwf	sprintf@f
  1563     01F8  0847               	movf	_command,w	;volatile
  1564     01F9  00AD               	movwf	??_ISR
  1565     01FA  01AE               	clrf	??_ISR+1
  1566     01FB  082D               	movf	??_ISR,w
  1567     01FC  00F1               	movwf	?_sprintf+1
  1568     01FD  082E               	movf	??_ISR+1,w
  1569     01FE  00F2               	movwf	?_sprintf+2
  1570     01FF  3049               	movlw	(low (_rcvStr| 0))& (0+255)
  1571     0200  120A  118A  236B  120A  118A  	fcall	_sprintf
  1572                           
  1573                           ;Bipolar_Stepper.c: 111:         UART_sendString(rcvStr);
  1574     0205  3049               	movlw	(low (_rcvStr| 0))& (0+255)
  1575     0206  00F1               	movwf	i1UART_sendString@str
  1576     0207  3000               	movlw	0
  1577     0208  00F2               	movwf	i1UART_sendString@str+1
  1578     0209  120A  118A  23D4  120A  118A  	fcall	i1_UART_sendString
  1579                           
  1580                           ;Bipolar_Stepper.c: 113:         if(command == 48)
  1581     020E  3030               	movlw	48
  1582     020F  0647               	xorwf	_command,w	;volatile
  1583     0210  1D03               	btfss	3,2
  1584     0211  2A15               	goto	i1l1326
  1585                           
  1586                           ;Bipolar_Stepper.c: 114:         {;Bipolar_Stepper.c: 115:             RD0 = ~RD0;
  1587     0212  3001               	movlw	1
  1588     0213  0688               	xorwf	8,f
  1589                           
  1590                           ;Bipolar_Stepper.c: 116:         }
  1591     0214  2A4D               	goto	i1l93
  1592     0215                     i1l1326:
  1593     0215  3031               	movlw	49
  1594     0216  0647               	xorwf	_command,w	;volatile
  1595     0217  1D03               	btfss	3,2
  1596     0218  2A27               	goto	i1l1332
  1597                           
  1598                           ;Bipolar_Stepper.c: 118:         {;Bipolar_Stepper.c: 119:             motor_freq = 4000
      +                          ;
  1599     0219  30A0               	movlw	160
  1600     021A  00DA               	movwf	_motor_freq	;volatile
  1601     021B  300F               	movlw	15
  1602     021C  00DB               	movwf	_motor_freq+1	;volatile
  1603                           
  1604                           ;Bipolar_Stepper.c: 120:             UART_sendString("Speed 1 running");
  1605     021D  302C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1606     021E  00F1               	movwf	i1UART_sendString@str
  1607     021F  3080               	movlw	128
  1608     0220  00F2               	movwf	i1UART_sendString@str+1
  1609     0221  120A  118A  23D4  120A  118A  	fcall	i1_UART_sendString
  1610                           
  1611                           ;Bipolar_Stepper.c: 121:         }
  1612     0226  2A4D               	goto	i1l93
  1613     0227                     i1l1332:
  1614     0227  3032               	movlw	50
  1615     0228  0647               	xorwf	_command,w	;volatile
  1616     0229  1D03               	btfss	3,2
  1617     022A  2A39               	goto	i1l1338
  1618                           
  1619                           ;Bipolar_Stepper.c: 123:         {;Bipolar_Stepper.c: 124:             motor_freq = 6000
      +                          ;
  1620     022B  3070               	movlw	112
  1621     022C  00DA               	movwf	_motor_freq	;volatile
  1622     022D  3017               	movlw	23
  1623     022E  00DB               	movwf	_motor_freq+1	;volatile
  1624                           
  1625                           ;Bipolar_Stepper.c: 125:             UART_sendString("Speed 2 running");
  1626     022F  303C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1627     0230  00F1               	movwf	i1UART_sendString@str
  1628     0231  3080               	movlw	128
  1629     0232  00F2               	movwf	i1UART_sendString@str+1
  1630     0233  120A  118A  23D4  120A  118A  	fcall	i1_UART_sendString
  1631                           
  1632                           ;Bipolar_Stepper.c: 126:         }
  1633     0238  2A4D               	goto	i1l93
  1634     0239                     i1l1338:
  1635     0239  3033               	movlw	51
  1636     023A  0647               	xorwf	_command,w	;volatile
  1637     023B  1D03               	btfss	3,2
  1638     023C  2A4B               	goto	i1l1344
  1639                           
  1640                           ;Bipolar_Stepper.c: 128:         {;Bipolar_Stepper.c: 129:             motor_freq = 8000
      +                          ;
  1641     023D  3040               	movlw	64
  1642     023E  00DA               	movwf	_motor_freq	;volatile
  1643     023F  301F               	movlw	31
  1644     0240  00DB               	movwf	_motor_freq+1	;volatile
  1645                           
  1646                           ;Bipolar_Stepper.c: 130:             UART_sendString("Speed 3 running");
  1647     0241  304C               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1648     0242  00F1               	movwf	i1UART_sendString@str
  1649     0243  3080               	movlw	128
  1650     0244  00F2               	movwf	i1UART_sendString@str+1
  1651     0245  120A  118A  23D4  120A  118A  	fcall	i1_UART_sendString
  1652                           
  1653                           ;Bipolar_Stepper.c: 131:         }
  1654     024A  2A4D               	goto	i1l93
  1655     024B                     i1l1344:
  1656                           
  1657                           ;Bipolar_Stepper.c: 133:         {;Bipolar_Stepper.c: 134:             mode = 1;
  1658     024B  3001               	movlw	1
  1659     024C  00C8               	movwf	_mode	;volatile
  1660     024D                     i1l93:
  1661     024D  0832               	movf	??_ISR+5,w
  1662     024E  00FF               	movwf	127
  1663     024F  0831               	movf	??_ISR+4,w
  1664     0250  008A               	movwf	10
  1665     0251  0830               	movf	??_ISR+3,w
  1666     0252  0084               	movwf	4
  1667     0253  0E2F               	swapf	??_ISR+2,w
  1668     0254  0083               	movwf	3
  1669     0255  0EFE               	swapf	126,f
  1670     0256  0E7E               	swapf	126,w
  1671     0257  0009               	retfie
  1672     0258                     __end_of_ISR:
  1673                           
  1674                           	psect	intentry
  1675     0004                     __pintentry:	
  1676                           ;incstack = 0
  1677                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1678                           
  1679     0004                     interrupt_function:
  1680     007E                     saved_w	set	btemp
  1681     0004  00FE               	movwf	btemp
  1682     0005  0E03               	swapf	3,w
  1683     0006  1283               	bcf	3,5	;RP0=0, select bank0
  1684     0007  1303               	bcf	3,6	;RP1=0, select bank0
  1685     0008  00AF               	movwf	??_ISR+2
  1686     0009  0804               	movf	4,w
  1687     000A  00B0               	movwf	??_ISR+3
  1688     000B  080A               	movf	10,w
  1689     000C  00B1               	movwf	??_ISR+4
  1690     000D  087F               	movf	btemp+1,w
  1691     000E  00B2               	movwf	??_ISR+5
  1692     000F  120A  118A  29CF   	ljmp	_ISR
  1693                           
  1694                           	psect	text9
  1695     0258                     __ptext9:	
  1696 ;; *************** function i1_Speed_Control *****************
  1697 ;; Defined at:
  1698 ;;		line 56 in file "Bipolar_Stepper.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  PWM_FREQ        2    6[BANK0 ] unsigned int 
  1701 ;;  State           1    8[BANK0 ] unsigned char 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  dutyCycle       2   11[BANK0 ] unsigned int 
  1704 ;;  PWM_RANGE       2    9[BANK0 ] unsigned int 
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      void 
  1707 ;; Registers used:
  1708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1709 ;; Tracked objects:
  1710 ;;		On entry : 300/0
  1711 ;;		On exit  : 300/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1714 ;;      Params:         0       3       0       0       0
  1715 ;;      Locals:         0       4       0       0       0
  1716 ;;      Temps:          2       0       0       0       0
  1717 ;;      Totals:         2       7       0       0       0
  1718 ;;Total ram usage:        9 bytes
  1719 ;; Hardware stack levels used: 1
  1720 ;; Hardware stack levels required when called: 2
  1721 ;; This function calls:
  1722 ;;		i1_UART_sendString
  1723 ;;		i1___aldiv
  1724 ;; This function is called by:
  1725 ;;		_ISR
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729     0258                     i1_Speed_Control:	
  1730                           ;psect for function i1_Speed_Control
  1731                           
  1732                           
  1733                           ;Bipolar_Stepper.c: 57:     uint16_t dutyCycle;;Bipolar_Stepper.c: 58:     if(PWM_FREQ >
      +                           10000 || PWM_FREQ < 1500)
  1734                           
  1735                           ;incstack = 0
  1736                           ; Regs used in i1_Speed_Control: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1737     0258  3027               	movlw	39
  1738     0259  0227               	subwf	i1Speed_Control@PWM_FREQ+1,w
  1739     025A  3011               	movlw	17
  1740     025B  1903               	skipnz
  1741     025C  0226               	subwf	i1Speed_Control@PWM_FREQ,w
  1742     025D  1803               	skipnc
  1743     025E  2A66               	goto	i1l1274
  1744     025F  3005               	movlw	5
  1745     0260  0227               	subwf	i1Speed_Control@PWM_FREQ+1,w
  1746     0261  30DC               	movlw	220
  1747     0262  1903               	skipnz
  1748     0263  0226               	subwf	i1Speed_Control@PWM_FREQ,w
  1749     0264  1803               	skipnc
  1750     0265  2A6E               	goto	i1l1278
  1751     0266                     i1l1274:
  1752                           
  1753                           ;Bipolar_Stepper.c: 59:     {;Bipolar_Stepper.c: 60:         UART_sendString("ERROR: inv
      +                          alid frequency!");
  1754     0266  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1755     0267  00F1               	movwf	i1UART_sendString@str
  1756     0268  3080               	movlw	128
  1757     0269  00F2               	movwf	i1UART_sendString@str+1
  1758     026A  120A  118A  23D4   	fcall	i1_UART_sendString
  1759     026D  0008               	return
  1760     026E                     i1l1278:
  1761                           
  1762                           ;Bipolar_Stepper.c: 63:     uint16_t PWM_RANGE = (16000000/(16*PWM_FREQ)) & 0xFFFF;
  1763     026E  0827               	movf	i1Speed_Control@PWM_FREQ+1,w
  1764     026F  00FA               	movwf	??i1_Speed_Control+1
  1765     0270  0826               	movf	i1Speed_Control@PWM_FREQ,w
  1766     0271  00F9               	movwf	??i1_Speed_Control
  1767     0272  0EF9               	swapf	??i1_Speed_Control,f
  1768     0273  0EFA               	swapf	??i1_Speed_Control+1,f
  1769     0274  30F0               	movlw	240
  1770     0275  05FA               	andwf	??i1_Speed_Control+1,f
  1771     0276  0879               	movf	??i1_Speed_Control,w
  1772     0277  390F               	andlw	15
  1773     0278  04FA               	iorwf	??i1_Speed_Control+1,f
  1774     0279  30F0               	movlw	240
  1775     027A  05F9               	andwf	??i1_Speed_Control,f
  1776     027B  0879               	movf	??i1_Speed_Control,w
  1777     027C  00F0               	movwf	i1___aldiv@divisor
  1778     027D  087A               	movf	??i1_Speed_Control+1,w
  1779     027E  00F1               	movwf	i1___aldiv@divisor+1
  1780     027F  01F2               	clrf	i1___aldiv@divisor+2
  1781     0280  01F3               	clrf	i1___aldiv@divisor+3
  1782     0281  3000               	movlw	0
  1783     0282  00F7               	movwf	i1___aldiv@dividend+3
  1784     0283  30F4               	movlw	244
  1785     0284  00F6               	movwf	i1___aldiv@dividend+2
  1786     0285  3024               	movlw	36
  1787     0286  00F5               	movwf	i1___aldiv@dividend+1
  1788     0287  3000               	movlw	0
  1789     0288  00F4               	movwf	i1___aldiv@dividend
  1790     0289  120A  118A  20B9  120A  118A  	fcall	i1___aldiv
  1791     028E  0871               	movf	?i1___aldiv+1,w
  1792     028F  00AA               	movwf	i1Speed_Control@PWM_RANGE+1
  1793     0290  0870               	movf	?i1___aldiv,w
  1794     0291  00A9               	movwf	i1Speed_Control@PWM_RANGE
  1795                           
  1796                           ;Bipolar_Stepper.c: 64:     PR2 = ((PWM_RANGE/4) - 1) & 0xFF;
  1797     0292  082A               	movf	i1Speed_Control@PWM_RANGE+1,w
  1798     0293  00FA               	movwf	??i1_Speed_Control+1
  1799     0294  0829               	movf	i1Speed_Control@PWM_RANGE,w
  1800     0295  00F9               	movwf	??i1_Speed_Control
  1801     0296  1003               	clrc
  1802     0297  0CFA               	rrf	??i1_Speed_Control+1,f
  1803     0298  0CF9               	rrf	??i1_Speed_Control,f
  1804     0299  1003               	clrc
  1805     029A  0CFA               	rrf	??i1_Speed_Control+1,f
  1806     029B  0CF9               	rrf	??i1_Speed_Control,f
  1807     029C  0879               	movf	??i1_Speed_Control,w
  1808     029D  3EFF               	addlw	255
  1809     029E  1683               	bsf	3,5	;RP0=1, select bank1
  1810     029F  0092               	movwf	18	;volatile
  1811                           
  1812                           ;Bipolar_Stepper.c: 66:     T2CKPS1 = 1;
  1813     02A0  1283               	bcf	3,5	;RP0=0, select bank0
  1814     02A1  1492               	bsf	18,1	;volatile
  1815                           
  1816                           ;Bipolar_Stepper.c: 67:     T2CKPS0 = 1;
  1817     02A2  1412               	bsf	18,0	;volatile
  1818                           
  1819                           ;Bipolar_Stepper.c: 69:     if(State == 0)
  1820     02A3  0828               	movf	i1Speed_Control@State,w
  1821     02A4  1D03               	btfss	3,2
  1822     02A5  2AA9               	goto	i1l1290
  1823                           
  1824                           ;Bipolar_Stepper.c: 70:     {;Bipolar_Stepper.c: 71:         dutyCycle = 0;
  1825     02A6  01AB               	clrf	i1Speed_Control@dutyCycle
  1826     02A7  01AC               	clrf	i1Speed_Control@dutyCycle+1
  1827                           
  1828                           ;Bipolar_Stepper.c: 72:     }
  1829     02A8  2AB0               	goto	i1l1294
  1830     02A9                     i1l1290:
  1831     02A9  0328               	decf	i1Speed_Control@State,w
  1832     02AA  1D03               	btfss	3,2
  1833     02AB  2AB0               	goto	i1l1294
  1834                           
  1835                           ;Bipolar_Stepper.c: 74:     {;Bipolar_Stepper.c: 75:         dutyCycle = PWM_RANGE;
  1836     02AC  082A               	movf	i1Speed_Control@PWM_RANGE+1,w
  1837     02AD  00AC               	movwf	i1Speed_Control@dutyCycle+1
  1838     02AE  0829               	movf	i1Speed_Control@PWM_RANGE,w
  1839     02AF  00AB               	movwf	i1Speed_Control@dutyCycle
  1840     02B0                     i1l1294:
  1841                           
  1842                           ;Bipolar_Stepper.c: 78:     CCP1CONbits.CCP1Y = (dutyCycle) & 1;
  1843     02B0  082B               	movf	i1Speed_Control@dutyCycle,w
  1844     02B1  3901               	andlw	1
  1845     02B2  00F9               	movwf	??i1_Speed_Control
  1846     02B3  0EF9               	swapf	??i1_Speed_Control,f
  1847     02B4  0817               	movf	23,w	;volatile
  1848     02B5  0679               	xorwf	??i1_Speed_Control,w
  1849     02B6  39EF               	andlw	-17
  1850     02B7  0679               	xorwf	??i1_Speed_Control,w
  1851     02B8  0097               	movwf	23	;volatile
  1852                           
  1853                           ;Bipolar_Stepper.c: 79:     CCP1CONbits.CCP1X = (dutyCycle) & 2;
  1854     02B9  082B               	movf	i1Speed_Control@dutyCycle,w
  1855     02BA  3902               	andlw	2
  1856     02BB  00F9               	movwf	??i1_Speed_Control
  1857     02BC  0EF9               	swapf	??i1_Speed_Control,f
  1858     02BD  0DF9               	rlf	??i1_Speed_Control,f
  1859     02BE  0817               	movf	23,w	;volatile
  1860     02BF  0679               	xorwf	??i1_Speed_Control,w
  1861     02C0  39DF               	andlw	-33
  1862     02C1  0679               	xorwf	??i1_Speed_Control,w
  1863     02C2  0097               	movwf	23	;volatile
  1864                           
  1865                           ;Bipolar_Stepper.c: 81:     CCPR1L = (dutyCycle) >> 2;
  1866     02C3  082C               	movf	i1Speed_Control@dutyCycle+1,w
  1867     02C4  00FA               	movwf	??i1_Speed_Control+1
  1868     02C5  082B               	movf	i1Speed_Control@dutyCycle,w
  1869     02C6  00F9               	movwf	??i1_Speed_Control
  1870     02C7  1003               	clrc
  1871     02C8  0CFA               	rrf	??i1_Speed_Control+1,f
  1872     02C9  0CF9               	rrf	??i1_Speed_Control,f
  1873     02CA  1003               	clrc
  1874     02CB  0CFA               	rrf	??i1_Speed_Control+1,f
  1875     02CC  0CF9               	rrf	??i1_Speed_Control,f
  1876     02CD  0879               	movf	??i1_Speed_Control,w
  1877     02CE  0095               	movwf	21	;volatile
  1878                           
  1879                           ;Bipolar_Stepper.c: 83:     TMR2ON = 1;
  1880     02CF  1512               	bsf	18,2	;volatile
  1881     02D0  0008               	return
  1882     02D1                     __end_ofi1_Speed_Control:
  1883                           
  1884                           	psect	text10
  1885     00B9                     __ptext10:	
  1886 ;; *************** function i1___aldiv *****************
  1887 ;; Defined at:
  1888 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\aldiv.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  divisor         4    0[COMMON] long 
  1891 ;;  dividend        4    4[COMMON] long 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  quotient        4    2[BANK0 ] long 
  1894 ;;  sign            1    1[BANK0 ] unsigned char 
  1895 ;;  counter         1    0[BANK0 ] unsigned char 
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  4    0[COMMON] long 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0, btemp+1
  1900 ;; Tracked objects:
  1901 ;;		On entry : 300/0
  1902 ;;		On exit  : 300/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1905 ;;      Params:         8       0       0       0       0
  1906 ;;      Locals:         0       6       0       0       0
  1907 ;;      Temps:          1       0       0       0       0
  1908 ;;      Totals:         9       6       0       0       0
  1909 ;;Total ram usage:       15 bytes
  1910 ;; Hardware stack levels used: 1
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		i1_Speed_Control
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918     00B9                     i1___aldiv:	
  1919                           ;psect for function i1___aldiv
  1920                           
  1921                           
  1922                           ;incstack = 0
  1923                           ; Regs used in i1___aldiv: [wreg+status,2+status,0+btemp+1]
  1924     00B9  01A1               	clrf	i1___aldiv@sign
  1925     00BA  1FF3               	btfss	i1___aldiv@divisor+3,7
  1926     00BB  28C9               	goto	i1l325
  1927     00BC  09F0               	comf	i1___aldiv@divisor,f
  1928     00BD  09F1               	comf	i1___aldiv@divisor+1,f
  1929     00BE  09F2               	comf	i1___aldiv@divisor+2,f
  1930     00BF  09F3               	comf	i1___aldiv@divisor+3,f
  1931     00C0  0AF0               	incf	i1___aldiv@divisor,f
  1932     00C1  1903               	skipnz
  1933     00C2  0AF1               	incf	i1___aldiv@divisor+1,f
  1934     00C3  1903               	skipnz
  1935     00C4  0AF2               	incf	i1___aldiv@divisor+2,f
  1936     00C5  1903               	skipnz
  1937     00C6  0AF3               	incf	i1___aldiv@divisor+3,f
  1938     00C7  01A1               	clrf	i1___aldiv@sign
  1939     00C8  0AA1               	incf	i1___aldiv@sign,f
  1940     00C9                     i1l325:
  1941     00C9  1FF7               	btfss	i1___aldiv@dividend+3,7
  1942     00CA  28DA               	goto	i1l1148
  1943     00CB  09F4               	comf	i1___aldiv@dividend,f
  1944     00CC  09F5               	comf	i1___aldiv@dividend+1,f
  1945     00CD  09F6               	comf	i1___aldiv@dividend+2,f
  1946     00CE  09F7               	comf	i1___aldiv@dividend+3,f
  1947     00CF  0AF4               	incf	i1___aldiv@dividend,f
  1948     00D0  1903               	skipnz
  1949     00D1  0AF5               	incf	i1___aldiv@dividend+1,f
  1950     00D2  1903               	skipnz
  1951     00D3  0AF6               	incf	i1___aldiv@dividend+2,f
  1952     00D4  1903               	skipnz
  1953     00D5  0AF7               	incf	i1___aldiv@dividend+3,f
  1954     00D6  3001               	movlw	1
  1955     00D7  00FF               	movwf	127
  1956     00D8  087F               	movf	127,w
  1957     00D9  06A1               	xorwf	i1___aldiv@sign,f
  1958     00DA                     i1l1148:
  1959     00DA  3000               	movlw	0
  1960     00DB  00A5               	movwf	i1___aldiv@quotient+3
  1961     00DC  3000               	movlw	0
  1962     00DD  00A4               	movwf	i1___aldiv@quotient+2
  1963     00DE  3000               	movlw	0
  1964     00DF  00A3               	movwf	i1___aldiv@quotient+1
  1965     00E0  3000               	movlw	0
  1966     00E1  00A2               	movwf	i1___aldiv@quotient
  1967     00E2  0873               	movf	i1___aldiv@divisor+3,w
  1968     00E3  0472               	iorwf	i1___aldiv@divisor+2,w
  1969     00E4  0471               	iorwf	i1___aldiv@divisor+1,w
  1970     00E5  0470               	iorwf	i1___aldiv@divisor,w
  1971     00E6  1903               	skipnz
  1972     00E7  292F               	goto	i1l1172
  1973     00E8  01A0               	clrf	i1___aldiv@counter
  1974     00E9  0AA0               	incf	i1___aldiv@counter,f
  1975     00EA                     i1l1158:
  1976     00EA  1BF3               	btfsc	i1___aldiv@divisor+3,7
  1977     00EB  28FA               	goto	i1l1160
  1978     00EC  3001               	movlw	1
  1979     00ED  00F8               	movwf	??i1___aldiv
  1980     00EE                     u62_25:
  1981     00EE  1003               	clrc
  1982     00EF  0DF0               	rlf	i1___aldiv@divisor,f
  1983     00F0  0DF1               	rlf	i1___aldiv@divisor+1,f
  1984     00F1  0DF2               	rlf	i1___aldiv@divisor+2,f
  1985     00F2  0DF3               	rlf	i1___aldiv@divisor+3,f
  1986     00F3  0BF8               	decfsz	??i1___aldiv,f
  1987     00F4  28EE               	goto	u62_25
  1988     00F5  3001               	movlw	1
  1989     00F6  00FF               	movwf	127
  1990     00F7  087F               	movf	127,w
  1991     00F8  07A0               	addwf	i1___aldiv@counter,f
  1992     00F9  28EA               	goto	i1l1158
  1993     00FA                     i1l1160:
  1994     00FA  3001               	movlw	1
  1995     00FB  00F8               	movwf	??i1___aldiv
  1996     00FC                     u64_25:
  1997     00FC  1003               	clrc
  1998     00FD  0DA2               	rlf	i1___aldiv@quotient,f
  1999     00FE  0DA3               	rlf	i1___aldiv@quotient+1,f
  2000     00FF  0DA4               	rlf	i1___aldiv@quotient+2,f
  2001     0100  0DA5               	rlf	i1___aldiv@quotient+3,f
  2002     0101  0BF8               	decfsz	??i1___aldiv,f
  2003     0102  28FC               	goto	u64_25
  2004     0103  0873               	movf	i1___aldiv@divisor+3,w
  2005     0104  0277               	subwf	i1___aldiv@dividend+3,w
  2006     0105  1D03               	skipz
  2007     0106  2911               	goto	u65_25
  2008     0107  0872               	movf	i1___aldiv@divisor+2,w
  2009     0108  0276               	subwf	i1___aldiv@dividend+2,w
  2010     0109  1D03               	skipz
  2011     010A  2911               	goto	u65_25
  2012     010B  0871               	movf	i1___aldiv@divisor+1,w
  2013     010C  0275               	subwf	i1___aldiv@dividend+1,w
  2014     010D  1D03               	skipz
  2015     010E  2911               	goto	u65_25
  2016     010F  0870               	movf	i1___aldiv@divisor,w
  2017     0110  0274               	subwf	i1___aldiv@dividend,w
  2018     0111                     u65_25:
  2019     0111  1C03               	skipc
  2020     0112  2922               	goto	i1l1168
  2021     0113  0870               	movf	i1___aldiv@divisor,w
  2022     0114  02F4               	subwf	i1___aldiv@dividend,f
  2023     0115  0871               	movf	i1___aldiv@divisor+1,w
  2024     0116  1C03               	skipc
  2025     0117  0F71               	incfsz	i1___aldiv@divisor+1,w
  2026     0118  02F5               	subwf	i1___aldiv@dividend+1,f
  2027     0119  0872               	movf	i1___aldiv@divisor+2,w
  2028     011A  1C03               	skipc
  2029     011B  0F72               	incfsz	i1___aldiv@divisor+2,w
  2030     011C  02F6               	subwf	i1___aldiv@dividend+2,f
  2031     011D  0873               	movf	i1___aldiv@divisor+3,w
  2032     011E  1C03               	skipc
  2033     011F  0F73               	incfsz	i1___aldiv@divisor+3,w
  2034     0120  02F7               	subwf	i1___aldiv@dividend+3,f
  2035     0121  1422               	bsf	i1___aldiv@quotient,0
  2036     0122                     i1l1168:
  2037     0122  3001               	movlw	1
  2038     0123                     u66_25:
  2039     0123  1003               	clrc
  2040     0124  0CF3               	rrf	i1___aldiv@divisor+3,f
  2041     0125  0CF2               	rrf	i1___aldiv@divisor+2,f
  2042     0126  0CF1               	rrf	i1___aldiv@divisor+1,f
  2043     0127  0CF0               	rrf	i1___aldiv@divisor,f
  2044     0128  3EFF               	addlw	-1
  2045     0129  1D03               	skipz
  2046     012A  2923               	goto	u66_25
  2047     012B  3001               	movlw	1
  2048     012C  02A0               	subwf	i1___aldiv@counter,f
  2049     012D  1D03               	btfss	3,2
  2050     012E  28FA               	goto	i1l1160
  2051     012F                     i1l1172:
  2052     012F  0821               	movf	i1___aldiv@sign,w
  2053     0130  1903               	btfsc	3,2
  2054     0131  293D               	goto	i1l1176
  2055     0132  09A2               	comf	i1___aldiv@quotient,f
  2056     0133  09A3               	comf	i1___aldiv@quotient+1,f
  2057     0134  09A4               	comf	i1___aldiv@quotient+2,f
  2058     0135  09A5               	comf	i1___aldiv@quotient+3,f
  2059     0136  0AA2               	incf	i1___aldiv@quotient,f
  2060     0137  1903               	skipnz
  2061     0138  0AA3               	incf	i1___aldiv@quotient+1,f
  2062     0139  1903               	skipnz
  2063     013A  0AA4               	incf	i1___aldiv@quotient+2,f
  2064     013B  1903               	skipnz
  2065     013C  0AA5               	incf	i1___aldiv@quotient+3,f
  2066     013D                     i1l1176:
  2067     013D  0825               	movf	i1___aldiv@quotient+3,w
  2068     013E  00F3               	movwf	?i1___aldiv+3
  2069     013F  0824               	movf	i1___aldiv@quotient+2,w
  2070     0140  00F2               	movwf	?i1___aldiv+2
  2071     0141  0823               	movf	i1___aldiv@quotient+1,w
  2072     0142  00F1               	movwf	?i1___aldiv+1
  2073     0143  0822               	movf	i1___aldiv@quotient,w
  2074     0144  00F0               	movwf	?i1___aldiv
  2075     0145  0008               	return
  2076     0146                     __end_ofi1___aldiv:
  2077                           
  2078                           	psect	text11
  2079     03D4                     __ptext11:	
  2080 ;; *************** function i1_UART_sendString *****************
  2081 ;; Defined at:
  2082 ;;		line 42 in file "UART.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;  str             2    1[COMMON] PTR unsigned char 
  2085 ;;		 -> STR_5(16), STR_4(16), STR_3(16), rcvStr(17), 
  2086 ;;		 -> STR_1(26), 
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2093 ;; Tracked objects:
  2094 ;;		On entry : 300/0
  2095 ;;		On exit  : 300/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2098 ;;      Params:         2       0       0       0       0
  2099 ;;      Locals:         0       0       0       0       0
  2100 ;;      Temps:          0       0       0       0       0
  2101 ;;      Totals:         2       0       0       0       0
  2102 ;;Total ram usage:        2 bytes
  2103 ;; Hardware stack levels used: 1
  2104 ;; Hardware stack levels required when called: 1
  2105 ;; This function calls:
  2106 ;;		i1_UART_sendChar
  2107 ;; This function is called by:
  2108 ;;		_ISR
  2109 ;;		i1_Speed_Control
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113     03D4                     i1_UART_sendString:	
  2114                           ;psect for function i1_UART_sendString
  2115                           
  2116     03D4                     i1l1136:	
  2117                           ;UART.c: 42: void UART_sendString(char* str);UART.c: 43: {;UART.c: 44:    while (*str)
  2118                           
  2119                           ;incstack = 0
  2120                           ; Regs used in i1_UART_sendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2121                           
  2122                           
  2123                           ;UART.c: 44:    while (*str)
  2124     03D4  0872               	movf	i1UART_sendString@str+1,w
  2125     03D5  00FF               	movwf	127
  2126     03D6  0871               	movf	i1UART_sendString@str,w
  2127     03D7  0084               	movwf	4
  2128     03D8  120A  118A  2300  120A  118A  	fcall	stringtab
  2129     03DD  3A00               	xorlw	0
  2130     03DE  1903               	btfsc	3,2
  2131     03DF  0008               	return
  2132                           
  2133                           ;UART.c: 45:    {;UART.c: 46:        UART_sendChar(*str++);
  2134     03E0  0872               	movf	i1UART_sendString@str+1,w
  2135     03E1  00FF               	movwf	127
  2136     03E2  0871               	movf	i1UART_sendString@str,w
  2137     03E3  0084               	movwf	4
  2138     03E4  120A  118A  2300  120A  118A  	fcall	stringtab
  2139     03E9  120A  118A  243F  120A  118A  	fcall	i1_UART_sendChar
  2140     03EE  3001               	movlw	1
  2141     03EF  07F1               	addwf	i1UART_sendString@str,f
  2142     03F0  1803               	skipnc
  2143     03F1  0AF2               	incf	i1UART_sendString@str+1,f
  2144     03F2  3000               	movlw	0
  2145     03F3  07F2               	addwf	i1UART_sendString@str+1,f
  2146     03F4  2BD4               	goto	i1l1136
  2147     03F5                     __end_ofi1_UART_sendString:
  2148                           
  2149                           	psect	text12
  2150     043F                     __ptext12:	
  2151 ;; *************** function i1_UART_sendChar *****************
  2152 ;; Defined at:
  2153 ;;		line 28 in file "UART.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  data            1    wreg     unsigned char 
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  data            1    0[COMMON] unsigned char 
  2158 ;; Return value:  Size  Location     Type
  2159 ;;                  1    wreg      void 
  2160 ;; Registers used:
  2161 ;;		wreg
  2162 ;; Tracked objects:
  2163 ;;		On entry : 300/0
  2164 ;;		On exit  : 300/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2167 ;;      Params:         0       0       0       0       0
  2168 ;;      Locals:         1       0       0       0       0
  2169 ;;      Temps:          0       0       0       0       0
  2170 ;;      Totals:         1       0       0       0       0
  2171 ;;Total ram usage:        1 bytes
  2172 ;; Hardware stack levels used: 1
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		i1_UART_sendString
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180     043F                     i1_UART_sendChar:	
  2181                           ;psect for function i1_UART_sendChar
  2182                           
  2183                           
  2184                           ;incstack = 0
  2185                           ; Regs used in i1_UART_sendChar: [wreg]
  2186                           ;i1UART_sendChar@data stored from wreg
  2187     043F  00F0               	movwf	i1UART_sendChar@data
  2188     0440                     i1l136:	
  2189                           ;UART.c: 28: void UART_sendChar(char data);UART.c: 29: {;UART.c: 30:    while (!TXIF);
  2190                           
  2191     0440  1E0C               	btfss	12,4	;volatile
  2192     0441  2C40               	goto	i1l136
  2193                           
  2194                           ;UART.c: 31:    TXREG = data;
  2195     0442  0870               	movf	i1UART_sendChar@data,w
  2196     0443  0099               	movwf	25	;volatile
  2197     0444  0008               	return
  2198     0445                     __end_ofi1_UART_sendChar:
  2199                           
  2200                           	psect	text13
  2201     036B                     __ptext13:	
  2202 ;; *************** function _sprintf *****************
  2203 ;; Defined at:
  2204 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  sp              1    wreg     PTR unsigned char 
  2207 ;;		 -> rcvStr(17), 
  2208 ;;  f               1    0[COMMON] PTR const unsigned char 
  2209 ;;		 -> STR_2(17), 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  sp              1    7[COMMON] PTR unsigned char 
  2212 ;;		 -> rcvStr(17), 
  2213 ;;  tmpval          4    0        struct .
  2214 ;;  cp              2    0        PTR const unsigned char 
  2215 ;;  len             2    0        unsigned int 
  2216 ;;  val             2    0        unsigned int 
  2217 ;;  c               1    6[COMMON] unsigned char 
  2218 ;;  ap              1    5[COMMON] PTR void [1]
  2219 ;;		 -> ?_sprintf(2), 
  2220 ;;  flag            1    0        unsigned char 
  2221 ;;  prec            1    0        char 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  2    0[COMMON] int 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2226 ;; Tracked objects:
  2227 ;;		On entry : 300/0
  2228 ;;		On exit  : B00/0
  2229 ;;		Unchanged: 300/0
  2230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2231 ;;      Params:         3       0       0       0       0
  2232 ;;      Locals:         3       0       0       0       0
  2233 ;;      Temps:          2       0       0       0       0
  2234 ;;      Totals:         8       0       0       0       0
  2235 ;;Total ram usage:        8 bytes
  2236 ;; Hardware stack levels used: 2
  2237 ;; This function calls:
  2238 ;;		Nothing
  2239 ;; This function is called by:
  2240 ;;		_ISR
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244     036B                     _sprintf:	
  2245                           ;psect for function _sprintf
  2246                           
  2247                           
  2248                           ;incstack = 0
  2249                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2250                           ;sprintf@sp stored from wreg
  2251     036B  00F7               	movwf	sprintf@sp
  2252                           
  2253                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2254     036C  3071               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2255     036D  00F5               	movwf	sprintf@ap
  2256     036E                     i1l1236:	
  2257                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2258                           
  2259                           
  2260                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2261     036E  3001               	movlw	1
  2262     036F  07F0               	addwf	sprintf@f,f
  2263     0370  30FF               	movlw	-1
  2264     0371  0770               	addwf	sprintf@f,w
  2265     0372  0084               	movwf	4
  2266     0373  120A  118A  230A  120A  118A  	fcall	stringdir
  2267     0378  00F6               	movwf	sprintf@c
  2268     0379  0876               	movf	sprintf@c,w
  2269     037A  1903               	btfsc	3,2
  2270     037B  2BAE               	goto	i1l1238
  2271                           
  2272                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2273     037C  3025               	movlw	37
  2274     037D  0676               	xorwf	sprintf@c,w
  2275     037E  1903               	btfsc	3,2
  2276     037F  2B93               	goto	i1l1234
  2277     0380  2B89               	goto	i1l1230
  2278     0381                     i1l1226:	
  2279                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  2280                           
  2281                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 559:    continue;
  2282                           
  2283                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2284                           
  2285                           
  2286                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 825:    c = (char
      +                          )(*(int *)__va_arg((*(int **)ap), (int)0));
  2287     0381  0875               	movf	sprintf@ap,w
  2288     0382  0084               	movwf	4
  2289     0383  0800               	movf	0,w
  2290     0384  00F6               	movwf	sprintf@c
  2291     0385  3002               	movlw	2
  2292     0386  00FF               	movwf	127
  2293     0387  087F               	movf	127,w
  2294     0388  07F5               	addwf	sprintf@ap,f
  2295     0389                     i1l1230:
  2296                           
  2297                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 835:    ((*sp++ =
      +                           (c)));
  2298     0389  0877               	movf	sprintf@sp,w
  2299     038A  0084               	movwf	4
  2300     038B  0876               	movf	sprintf@c,w
  2301     038C  1383               	bcf	3,7	;select IRP bank0
  2302     038D  0080               	movwf	0
  2303     038E  3001               	movlw	1
  2304     038F  00FF               	movwf	127
  2305     0390  087F               	movf	127,w
  2306     0391  07F7               	addwf	sprintf@sp,f
  2307                           
  2308                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 836:    continue;
  2309     0392  2B6E               	goto	i1l1236
  2310     0393                     i1l1234:
  2311     0393  3001               	movlw	1
  2312     0394  07F0               	addwf	sprintf@f,f
  2313     0395  30FF               	movlw	-1
  2314     0396  0770               	addwf	sprintf@f,w
  2315     0397  0084               	movwf	4
  2316     0398  120A  118A  230A  120A  118A  	fcall	stringdir
  2317     039D  00F6               	movwf	sprintf@c
  2318     039E  00F3               	movwf	??_sprintf
  2319     039F  01F4               	clrf	??_sprintf+1
  2320                           
  2321                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2322                           ; Switch size 1, requested type "simple"
  2323                           ; Number of cases is 1, Range of values is 0 to 0
  2324                           ; switch strategies available:
  2325                           ; Name         Instructions Cycles
  2326                           ; simple_byte            4     3 (average)
  2327                           ; direct_byte           11     8 (fixed)
  2328                           ; jumptable            260     6 (fixed)
  2329                           ;	Chosen strategy is simple_byte
  2330     03A0  0874               	movf	??_sprintf+1,w
  2331     03A1  3A00               	xorlw	0	; case 0
  2332     03A2  1903               	skipnz
  2333     03A3  2BA5               	goto	i1l1496
  2334     03A4  2B89               	goto	i1l1230
  2335     03A5                     i1l1496:
  2336                           
  2337                           ; Switch size 1, requested type "simple"
  2338                           ; Number of cases is 2, Range of values is 0 to 99
  2339                           ; switch strategies available:
  2340                           ; Name         Instructions Cycles
  2341                           ; simple_byte            7     4 (average)
  2342                           ; jumptable            260     6 (fixed)
  2343                           ;	Chosen strategy is simple_byte
  2344     03A5  0873               	movf	??_sprintf,w
  2345     03A6  3A00               	xorlw	0	; case 0
  2346     03A7  1903               	skipnz
  2347     03A8  2BAE               	goto	i1l1238
  2348     03A9  3A63               	xorlw	99	; case 99
  2349     03AA  1903               	skipnz
  2350     03AB  2B81               	goto	i1l1226
  2351     03AC  2B89               	goto	i1l1230
  2352     03AD  2B6E               	goto	i1l1236
  2353     03AE                     i1l1238:
  2354                           
  2355                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2356     03AE  0877               	movf	sprintf@sp,w
  2357     03AF  0084               	movwf	4
  2358     03B0  1383               	bcf	3,7	;select IRP bank0
  2359     03B1  0180               	clrf	0
  2360     03B2  0008               	return
  2361     03B3                     __end_of_sprintf:
  2362     007E                     btemp	set	126	;btemp
  2363     007E                     wtemp0	set	126
  2364                           
  2365                           	psect	idloc
  2366                           
  2367                           ;Config register IDLOC0 @ 0x2000
  2368                           ;	unspecified, using default values
  2369     2000                     	org	8192
  2370     2000  3FFF               	dw	16383
  2371                           
  2372                           ;Config register IDLOC1 @ 0x2001
  2373                           ;	unspecified, using default values
  2374     2001                     	org	8193
  2375     2001  3FFF               	dw	16383
  2376                           
  2377                           ;Config register IDLOC2 @ 0x2002
  2378                           ;	unspecified, using default values
  2379     2002                     	org	8194
  2380     2002  3FFF               	dw	16383
  2381                           
  2382                           ;Config register IDLOC3 @ 0x2003
  2383                           ;	unspecified, using default values
  2384     2003                     	org	8195
  2385     2003  3FFF               	dw	16383
  2386                           
  2387                           	psect	config
  2388                           
  2389                           ;Config register CONFIG @ 0x2007
  2390                           ;	Oscillator Selection bits
  2391                           ;	FOSC = HS, HS oscillator
  2392                           ;	Watchdog Timer Enable bit
  2393                           ;	WDTE = OFF, WDT disabled
  2394                           ;	Power-up Timer Enable bit
  2395                           ;	PWRTE = OFF, PWRT disabled
  2396                           ;	Brown-out Reset Enable bit
  2397                           ;	BOREN = ON, BOR enabled
  2398                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2399                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2400                           ;	Data EEPROM Memory Code Protection bit
  2401                           ;	CPD = OFF, Data EEPROM code protection off
  2402                           ;	Flash Program Memory Write Enable bits
  2403                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2404                           ;	In-Circuit Debugger Mode bit
  2405                           ;	DEBUG = 0x1, unprogrammed default
  2406                           ;	Flash Program Memory Code Protection bit
  2407                           ;	CP = OFF, Code protection off
  2408     2007                     	org	8199
  2409     2007  3F7A               	dw	16250

Data Sizes:
    Strings     91
    Constant    0
    Data        2
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     39      60
    BANK1            80      4       4
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_2(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> rcvStr(BANK0[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMMON[2]), 

    UART_sendString@str	PTR unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[16]), STR_4(CODE[16]), STR_3(CODE[16]), rcvStr(BANK0[17]), 
		 -> STR_1(CODE[26]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_Speed_Control
    i1_Speed_Control->i1___aldiv
    i1_UART_sendString->i1_UART_sendChar

Critical Paths under _main in BANK0

    _main->_Speed_Control
    _Speed_Control->___aldiv
    _UART_sendString->_UART_sendChar

Critical Paths under _ISR in BANK0

    _ISR->i1_Speed_Control
    i1_Speed_Control->i1___aldiv

Critical Paths under _main in BANK1

    _main->_Speed_Control

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1640
                        _ExtInt_Init
                           _PWM_Init
                      _Speed_Control
                          _UART_Init
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Speed_Control                                        9     6      3    1640
                                             34 BANK0      5     2      3
                                              0 BANK1      4     4      0
                    _UART_sendString
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                             19 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _UART_sendString                                      2     0      2     406
                                             20 BANK0      2     0      2
                      _UART_sendChar
 ---------------------------------------------------------------------------------
 (3) _UART_sendChar                                        1     1      0      31
                                             19 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ExtInt_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  6     6      0    1336
                                             13 BANK0      6     6      0
                            _sprintf
                    i1_Speed_Control
                  i1_UART_sendString
 ---------------------------------------------------------------------------------
 (5) i1_Speed_Control                                      9     6      3     824
                                              9 COMMON     2     2      0
                                              6 BANK0      7     4      3
                  i1_UART_sendString
                          i1___aldiv
 ---------------------------------------------------------------------------------
 (6) i1___aldiv                                           15     7      8     352
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (5) i1_UART_sendString                                    2     0      2     197
                                              1 COMMON     2     0      2
                    i1_UART_sendChar
 ---------------------------------------------------------------------------------
 (6) i1_UART_sendChar                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             20    17      3     315
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ExtInt_Init
   _PWM_Init
   _Speed_Control
     _UART_sendString
       _UART_sendChar
     ___aldiv
   _UART_Init

 _ISR (ROOT)
   _sprintf
   i1_Speed_Control
     i1_UART_sendString
       i1_UART_sendChar
     i1___aldiv
   i1_UART_sendString

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4       4       7        5.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     27      3C       5       75.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4B      12        0.0%
ABS                  0      0      4B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Jun 17 11:42:47 2023

                        pc 0002                         fsr 0004                        l136 043A  
                      l325 003C                        _GIE 005F                        _RB0 0030  
                      _RD0 0040                        _RD1 0041                        _PR2 0092  
                      _ISR 01CF                        u945 0061                        _RX9 00C6  
                      u965 006F                        u975 0084                        u985 0096  
                      _TX9 04C6                        fsr0 0004                        indf 0000  
                     ?_ISR 0070             i1___aldiv@sign 0021                       l1400 004D  
                     l1410 005D                       l1420 0095                       l1412 006D  
                     l1424 00A2                       l1440 015C                       l1428 00B0  
                     l1452 019E                       l1436 0154                       l1456 01A6  
                     l1472 0406                       l1388 03B3                       STR_1 0310  
                     STR_2 032A                       STR_3 033B                       STR_4 034B  
                     STR_5 035B    __end_ofi1_UART_sendChar 0445                       _BRGH 04C2  
                     _CREN 00C4                       _PEIE 005E                       _INTE 005C  
                     _INTF 0059                       _RCIE 0465                       _RCIF 0065  
                     i1l80 01EB                       i1l93 024D                       i1l78 01EE  
                     _OERR 00C1                       _SPEN 00C7                       _TXEN 04C5  
                     _TXIF 0064                       _SYNC 04C4                       _main 03F5  
                     _mode 0048           ?i1_Speed_Control 0026                       btemp 007E  
                     start 0012              ??_ExtInt_Init 0033                      ??_ISR 002D  
          __end_of___aldiv 00B9                      ?_main 0070                      i1l136 0440  
                    i1l325 00C9                      _RCREG 001A                      _SPBRG 0099  
                    u62_25 00EE                      u64_25 00FC                      u65_25 0111  
                    u66_25 0123                      _TXREG 0019                      pclath 000A  
         __end_of_PWM_Init 044A                      status 0003                      wtemp0 007E  
          __end_of_sprintf 03B3            _UART_sendString 03B3            __initialization 0015  
             __end_of_main 0415                     ??_main 0047        __end_of_ExtInt_Init 0439  
                   _CCP1M2 00BA                     _CCP1M3 00BB                     _CCPR1L 0015  
         ?i1_UART_sendChar 0070                     i1l1230 0389                     i1l1136 03D4  
                   i1l1160 00FA                     i1l1226 0381                     i1l1234 0393  
                   i1l1236 036E                     i1l1172 012F                     i1l1148 00DA  
                   i1l1332 0227                     i1l1316 01F4                     i1l1238 03AE  
                   i1l1158 00EA                     i1l1326 0215                     i1l1176 013D  
                   i1l1168 0122                     i1l1344 024B                     i1l1290 02A9  
                   i1l1274 0266                     i1l1338 0239                     i1l1294 02B0  
                   i1l1278 026E                     i1l1496 03A5                     u106_27 01D7  
                   _INTEDG 040E      __end_of_Speed_Control 01CF                     _TMR2ON 0092  
                   _TRISB0 0430                     _TRISC2 043A          __end_of_UART_Init 042A  
                ??___aldiv 003B                     _rcvStr 0049       i1Speed_Control@State 0028  
        __end_ofi1___aldiv 0146                     saved_w 007E                  ??_sprintf 0073  
  __end_of_UART_sendString 03D4          UART_sendChar@data 0033    __end_of__initialization 0028  
           __pcstackCOMMON 0070               __pidataBANK0 044A                _ExtInt_Init 0432  
                ?_PWM_Init 0070          i1___aldiv@divisor 0070      __end_of_UART_sendChar 043F  
        i1___aldiv@counter 0020                 __pbssBANK0 0047                 __pmaintext 03F5  
               __pintentry 0004   i1Speed_Control@PWM_RANGE 0029                 ??_PWM_Init 0033  
                  _T2CKPS0 0090                    _T2CKPS1 0091                 __stringtab 0300  
         ?_UART_sendString 0034                    ___aldiv 002C                    __ptext1 0415  
                  __ptext2 0146                    __ptext3 002C                    __ptext4 03B3  
                  __ptext5 0439                    __ptext6 0445                    __ptext7 0432  
                  __ptext8 01CF                    __ptext9 0258                    _command 0047  
         ___aldiv@dividend 0037                    _sprintf 036B                    clrloop0 042B  
     end_of_initialization 0028       i1UART_sendString@str 0071           ___aldiv@quotient 003E  
               _motor_freq 005A                  _UART_Init 0415         Speed_Control@State 0044  
                _TRISCbits 0087                  i1___aldiv 00B9                _CCP1CONbits 0017  
             ?_ExtInt_Init 0070                 ?_UART_Init 0070          ??i1_Speed_Control 0079  
 i1Speed_Control@dutyCycle 002B        start_initialization 0015                __end_of_ISR 0258  
               ?i1___aldiv 0070                __pdataBANK0 005A         i1___aldiv@dividend 0074  
      i1UART_sendChar@data 0070                  ___latbits 0002              __pcstackBANK0 0020  
            __pcstackBANK1 00A0     Speed_Control@PWM_RANGE 00A0         i1___aldiv@quotient 0022  
            _Speed_Control 0146                   ?___aldiv 0033    i1Speed_Control@PWM_FREQ 0026  
              ??_UART_Init 0033          ??i1_UART_sendChar 0070                  __pstrings 0300  
              ??i1___aldiv 0078                   ?_sprintf 0070            ___aldiv@divisor 0033  
           ?_Speed_Control 0042          interrupt_function 0004            ___aldiv@counter 003C  
        i1_UART_sendString 03D4                  clear_ram0 042A         ?i1_UART_sendString 0071  
       UART_sendString@str 0034        ??i1_UART_sendString 0073                __stringbase 030F  
                 _PWM_Init 0445              _UART_sendChar 0439  __end_ofi1_UART_sendString 03F5  
          i1_Speed_Control 0258      Speed_Control@PWM_FREQ 0042         __end_of__stringtab 0310  
                 __ptext10 00B9                   __ptext11 03D4                   __ptext12 043F  
                 __ptext13 036B             ?_UART_sendChar 0070     Speed_Control@dutyCycle 00A2  
          ??_Speed_Control 0045          ??_UART_sendString 0036                   intlevel1 0000  
                sprintf@ap 0075                  sprintf@sp 0077    __end_ofi1_Speed_Control 02D1  
          i1_UART_sendChar 043F                  stringcode 030A                   sprintf@c 0076  
                 sprintf@f 0070                   stringdir 030A                   stringtab 0300  
             ___aldiv@sign 003D            ??_UART_sendChar 0033  
